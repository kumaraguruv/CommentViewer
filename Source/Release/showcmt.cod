; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\Hex-Rays.IDA.Pro.Advanced.v6.5\idasdk\plugins\CommentViewer\Source\showcmt.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	?run@@YGXH@Z					; run
PUBLIC	?termPlugin@@YGXXZ				; termPlugin
PUBLIC	?initPlugin@@YGHXZ				; initPlugin
PUBLIC	??_C@_07JABLCLAF@Comment?$AA@			; `string'
PUBLIC	??_C@_0BB@HCJLADAK@Instruction?1Data?$AA@	; `string'
PUBLIC	??_C@_01GAPBHFFA@T?$AA@				; `string'
PUBLIC	??_C@_07EODJIPPN@Address?$AA@			; `string'
PUBLIC	?vmsg@@YGHPBDPAD@Z				; vmsg
PUBLIC	?msg@@YAHPBDZZ					; msg
PUBLIC	?get_area_cmt@areacb_t@@QBEPADPBUarea_t@@_N@Z	; areacb_t::get_area_cmt
PUBLIC	?get_func_cmt@@YGPADPAVfunc_t@@_N@Z		; get_func_cmt
PUBLIC	?set_area_cmt@areacb_t@@QAE_NPBUarea_t@@PBD_N@Z	; areacb_t::set_area_cmt
PUBLIC	?set_func_cmt@@YG_NPAVfunc_t@@PBD_N@Z		; set_func_cmt
PUBLIC	?has_cmt@@YG_NI@Z				; has_cmt
PUBLIC	?isFunc@@YG_NI@Z				; isFunc
PUBLIC	?is_tilcmt@@YG_NI@Z				; is_tilcmt
PUBLIC	?show_wait_box_v@@YGXPBDPAD@Z			; show_wait_box_v
PUBLIC	?show_wait_box@@YAXPBDZZ			; show_wait_box
PUBLIC	?hide_wait_box@@YGXXZ				; hide_wait_box
PUBLIC	?setStat@@YGHH@Z				; setStat
PUBLIC	?isData@@YG_NI@Z				; isData
PUBLIC	?isUnknown@@YG_NI@Z				; isUnknown
PUBLIC	?altshift@netnode@@QAEIIIID@Z			; netnode::altshift
PUBLIC	?supshift@netnode@@QAEIIIID@Z			; netnode::supshift
PUBLIC	??0netnode@@QAE@XZ				; netnode::netnode
PUBLIC	?create@netnode@@QAE_NPBDI@Z			; netnode::create
PUBLIC	?choose2@@YGIHHHHHPAXHPBHP6GI0@ZP6GX0IPBQAD@ZPBDHIP6GI0I@ZP6GX0@Z6P6GX0I@Z87PBQBDP6GH0I@Z@Z ; choose2
PUBLIC	?get_screen_ea@@YGIXZ				; get_screen_ea
PUBLIC	?choose_segm@@YGPAVsegment_t@@PBDI@Z		; choose_segm
PUBLIC	?vwarning@@YGXPBDPAD@Z				; vwarning
PUBLIC	?warning@@YAXPBDZZ				; warning
PUBLIC	?AskUsingForm_cv@@YGHPBDPAD@Z			; AskUsingForm_cv
PUBLIC	?AskUsingForm_c@@YAHPBDZZ			; AskUsingForm_c
PUBLIC	?supval@netnode@@QBEHIPAXID@Z			; netnode::supval
PUBLIC	?getFlags@@YGII@Z				; getFlags
PUBLIC	?isCode@@YG_NI@Z				; isCode
PUBLIC	?has_any_name@@YG_NI@Z				; has_any_name
PUBLIC	?jumpto@@YG_NIHH@Z				; jumpto
PUBLIC	?altval@netnode@@QBEIID@Z			; netnode::altval
PUBLIC	??Bnetnode@@QBEIXZ				; netnode::operator unsigned int
PUBLIC	?supset@netnode@@QAE_NIPBXID@Z			; netnode::supset
PUBLIC	?altset@netnode@@QAE_NIID@Z			; netnode::altset
PUBLIC	?refresh_idaview_anyway@@YGXXZ			; refresh_idaview_anyway
PUBLIC	?vasktext@@YGPADIPADPBD10@Z			; vasktext
PUBLIC	?asktext@@YAPADIPADPBD1ZZ			; asktext
PUBLIC	?kill@netnode@@QAEXXZ				; netnode::kill
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?winCount@@3GA					; winCount
PUBLIC	?opt1@@3FA					; opt1
PUBLIC	?opt2@@3FA					; opt2
PUBLIC	?isInited@@3_NA					; isInited
PUBLIC	??_C@_0DA@GKEMENKJ@?5?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@ ; `string'
PUBLIC	??_C@_0DA@EBMLBBCP@?5?$CK?$CK?$CK?5CommentViewer?5v?40?42?5?$CIc?$CJ?5bLa@ ; `string'
PUBLIC	??_C@_0DA@BDAIMFLC@?5?$CK?$CK?$CK?5Bugs?0?5suggestions?5?3?5bLaCk?$EAr@ ; `string'
PUBLIC	??_C@_0CC@FEMLKJGK@Scanning?5database?5for?5comments?4?4@ ; `string'
PUBLIC	??_C@_01LFCBOECM@?4?$AA@			; `string'
PUBLIC	??_C@_01DGKLNCNG@R?$AA@				; `string'
PUBLIC	??_C@_05DNIIFBMG@?$CFs?5?$CFs?$AA@		; `string'
PUBLIC	??_C@_0BG@LADDGNMI@Please?5enter?5comment?3?$AA@ ; `string'
PUBLIC	??_C@_0FE@CJFGNFBN@IDA?5is?5still?5analysing?5your?5file@ ; `string'
PUBLIC	??_C@_0BI@CDAMMLLD@Comment?5Viewer?5?9?5?$FLFULL?$FN?$AA@ ; `string'
PUBLIC	??_C@_0BN@LFKLCMGG@?$FL?$CFi?$FN?5Comment?5Viewer?5?9?5?$FLFULL?$FN?$AA@ ; `string'
PUBLIC	??_C@_0CM@OKJPJFGB@Please?5choose?5segment?5to?5get?5com@ ; `string'
PUBLIC	??_C@_0BI@OIAEPCPP@Comment?5Viewer?5?9?5?$FL?$CF?48s?$FN?$AA@ ; `string'
PUBLIC	??_C@_0BN@HOKDBFCK@?$FL?$CFi?$FN?5Comment?5Viewer?5?9?5?$FL?$CF?48s?$FN?$AA@ ; `string'
PUBLIC	??_C@_0BEG@BJIFKFGI@Comment?5Viewer?5v?40?42?6Options?3?6?$DMS@ ; `string'
PUBLIC	?comment@@3PADA					; comment
PUBLIC	?help@@3PADA					; help
PUBLIC	?wanted_name@@3PADA				; wanted_name
PUBLIC	?wanted_hotkey@@3PADA				; wanted_hotkey
PUBLIC	_PLUGIN
EXTRN	__imp__qfree@4:PROC
EXTRN	__imp__strrpl@12:PROC
EXTRN	__imp__get_cmt@16:PROC
EXTRN	__imp__areacb_t_get_area_cmt@12:PROC
EXTRN	__imp__set_cmt@12:PROC
EXTRN	__imp__getn_func@4:PROC
EXTRN	__imp__get_func_num@4:PROC
EXTRN	__imp__areacb_t_set_area_cmt@16:PROC
EXTRN	__imp__funcs:BYTE
EXTRN	__imp__get_aflags@4:PROC
EXTRN	__imp__nextthat@16:PROC
EXTRN	__imp__auto_display:BYTE
EXTRN	__imp__netnode_altshift@20:PROC
EXTRN	__imp__netnode_supshift@20:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	__imp__inf:BYTE
EXTRN	__imp__netnode_check@16:PROC
EXTRN	__imp__get_true_segm_name@12:PROC
EXTRN	__imp__autoWait@0:PROC
EXTRN	__imp__autoIsOk@0:PROC
EXTRN	__imp__qstrncpy@12:PROC
EXTRN	__imp__qsnprintf:PROC
EXTRN	__imp__netnode_supval@20:PROC
EXTRN	__imp__tag_remove@12:PROC
EXTRN	__imp__generate_disasm_line@16:PROC
EXTRN	__imp__get_flags_ex@8:PROC
EXTRN	__imp__get_func_name@12:PROC
EXTRN	__imp__addblanks@8:PROC
EXTRN	__imp__trim@4:PROC
EXTRN	__imp__get_name@16:PROC
EXTRN	__imp__get_nice_colored_name@16:PROC
EXTRN	__imp__print_type@16:PROC
EXTRN	__imp__netnode_altval@12:PROC
EXTRN	__imp__netnode_supset@20:PROC
EXTRN	__imp__callui:DWORD
EXTRN	__imp__netnode_kill@4:PROC
?winCount@@3GA DW 01H DUP (?)				; winCount
	ALIGN	4

?isInited@@3_NA DB 01H DUP (?)				; isInited
;	COMDAT ??_C@_0BEG@BJIFKFGI@Comment?5Viewer?5v?40?42?6Options?3?6?$DMS@
CONST	SEGMENT
??_C@_0BEG@BJIFKFGI@Comment?5Viewer?5v?40?42?6Options?3?6?$DMS@ DB 'Comme'
	DB	'nt Viewer v.0.2', 0aH, 'Options:', 0aH, '<Show non-repeatable'
	DB	' comments:C:1:1::>', 0aH, '<Show repeatable comment:C:1:1::>>'
	DB	0aH, '<Show code comments:C:1:1::>', 0aH, '<Show data comments'
	DB	':C:1:1:>', 0aH, '<Show function comments:C:1:1::>', 0aH, '<Sh'
	DB	'ow undefined bytes comments:C:1:1:>', 0aH, '<Show IDA''s defa'
	DB	'ult code comments:C:1:1:>', 0aH, '<Show function declarations'
	DB	' (if exists):C:1:1::>>', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@HOKDBFCK@?$FL?$CFi?$FN?5Comment?5Viewer?5?9?5?$FL?$CF?48s?$FN?$AA@
CONST	SEGMENT
??_C@_0BN@HOKDBFCK@?$FL?$CFi?$FN?5Comment?5Viewer?5?9?5?$FL?$CF?48s?$FN?$AA@ DB '['
	DB	'%i] Comment Viewer - [%.8s]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@OIAEPCPP@Comment?5Viewer?5?9?5?$FL?$CF?48s?$FN?$AA@
CONST	SEGMENT
??_C@_0BI@OIAEPCPP@Comment?5Viewer?5?9?5?$FL?$CF?48s?$FN?$AA@ DB 'Comment'
	DB	' Viewer - [%.8s]', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@OKJPJFGB@Please?5choose?5segment?5to?5get?5com@
CONST	SEGMENT
??_C@_0CM@OKJPJFGB@Please?5choose?5segment?5to?5get?5com@ DB 'Please choo'
	DB	'se segment to get comments from:', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LFKLCMGG@?$FL?$CFi?$FN?5Comment?5Viewer?5?9?5?$FLFULL?$FN?$AA@
CONST	SEGMENT
??_C@_0BN@LFKLCMGG@?$FL?$CFi?$FN?5Comment?5Viewer?5?9?5?$FLFULL?$FN?$AA@ DB '['
	DB	'%i] Comment Viewer - [FULL]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CDAMMLLD@Comment?5Viewer?5?9?5?$FLFULL?$FN?$AA@
CONST	SEGMENT
??_C@_0BI@CDAMMLLD@Comment?5Viewer?5?9?5?$FLFULL?$FN?$AA@ DB 'Comment Vie'
	DB	'wer - [FULL]', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FE@CJFGNFBN@IDA?5is?5still?5analysing?5your?5file@
CONST	SEGMENT
??_C@_0FE@CJFGNFBN@IDA?5is?5still?5analysing?5your?5file@ DB 'IDA is stil'
	DB	'l analysing your file!', 0aH, 'Plugin will start after autoan'
	DB	'alysis is finished.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LADDGNMI@Please?5enter?5comment?3?$AA@
CONST	SEGMENT
??_C@_0BG@LADDGNMI@Please?5enter?5comment?3?$AA@ DB 'Please enter comment'
	DB	':', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_05DNIIFBMG@?$CFs?5?$CFs?$AA@
CONST	SEGMENT
??_C@_05DNIIFBMG@?$CFs?5?$CFs?$AA@ DB '%s %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01DGKLNCNG@R?$AA@
CONST	SEGMENT
??_C@_01DGKLNCNG@R?$AA@ DB 'R', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LFCBOECM@?4?$AA@
CONST	SEGMENT
??_C@_01LFCBOECM@?4?$AA@ DB '.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@FEMLKJGK@Scanning?5database?5for?5comments?4?4@
CONST	SEGMENT
??_C@_0CC@FEMLKJGK@Scanning?5database?5for?5comments?4?4@ DB 'Scanning da'
	DB	'tabase for comments...', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@BDAIMFLC@?5?$CK?$CK?$CK?5Bugs?0?5suggestions?5?3?5bLaCk?$EAr@
CONST	SEGMENT
??_C@_0DA@BDAIMFLC@?5?$CK?$CK?$CK?5Bugs?0?5suggestions?5?3?5bLaCk?$EAr@ DB ' '
	DB	'*** Bugs, suggestions : bLaCk@reteam.org  ***', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@EBMLBBCP@?5?$CK?$CK?$CK?5CommentViewer?5v?40?42?5?$CIc?$CJ?5bLa@
CONST	SEGMENT
??_C@_0DA@EBMLBBCP@?5?$CK?$CK?$CK?5CommentViewer?5v?40?42?5?$CIc?$CJ?5bLa@ DB ' '
	DB	'*** CommentViewer v.0.2 (c) bLaCk-eye/RET ***', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@GKEMENKJ@?5?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@
CONST	SEGMENT
??_C@_0DA@GKEMENKJ@?5?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@ DB ' '
	DB	'*********************************************', 0aH, 00H ; `string'
_header	DD	FLAT:??_C@_07EODJIPPN@Address?$AA@
	DD	FLAT:??_C@_01GAPBHFFA@T?$AA@
	DD	FLAT:??_C@_0BB@HCJLADAK@Instruction?1Data?$AA@
	DD	FLAT:??_C@_07JABLCLAF@Comment?$AA@
?opt1@@3FA DW	02H					; opt1
	ORG $+2
?opt2@@3FA DW	027H					; opt2
	ORG $+2
?comment@@3PADA DB 'Show repeatable comments in current database.', 00H ; comment
	ORG $+2
?help@@3PADA DB	'This plugin shows all the repeatable comments in your da'
	DB	'tabase.', 0aH, 00H				; help
	ORG $+3
?wanted_name@@3PADA DB 'Comment Viewer', 00H		; wanted_name
	ORG $+1
?wanted_hotkey@@3PADA DB 'Ctrl-8', 00H			; wanted_hotkey
	ORG $+1
_PLUGIN	DD	04cH
	DD	00H
	DD	FLAT:?initPlugin@@YGHXZ
	DD	FLAT:?termPlugin@@YGXXZ
	DD	FLAT:?run@@YGXH@Z
	DD	FLAT:?comment@@3PADA
	DD	FLAT:?help@@3PADA
	DD	FLAT:?wanted_name@@3PADA
	DD	FLAT:?wanted_hotkey@@3PADA
;	COMDAT ??_C@_07JABLCLAF@Comment?$AA@
CONST	SEGMENT
??_C@_07JABLCLAF@Comment?$AA@ DB 'Comment', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HCJLADAK@Instruction?1Data?$AA@
CONST	SEGMENT
??_C@_0BB@HCJLADAK@Instruction?1Data?$AA@ DB 'Instruction/Data', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01GAPBHFFA@T?$AA@
CONST	SEGMENT
??_C@_01GAPBHFFA@T?$AA@ DB 'T', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07EODJIPPN@Address?$AA@
CONST	SEGMENT
??_C@_07EODJIPPN@Address?$AA@ DB 'Address', 00H		; `string'
_widths	DD	010H
	DD	01H
	DD	030H
	DD	064H
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogtp
; File c:\hex-rays.ida.pro.advanced.v6.5\idasdk\plugins\commentviewer\source\showcmt.cpp
CONST	ENDS
_TEXT	SEGMENT
?termPlugin@@YGXXZ PROC					; termPlugin

; 69   : }

  00000	c3		 ret	 0
?termPlugin@@YGXXZ ENDP					; termPlugin
; Function compile flags: /Ogtp
?initPlugin@@YGHXZ PROC				; initPlugin

; 58   : 
; 59   :     return PLUGIN_OK;

  00010	b8 01 00 00 00	 mov	 eax, 1

; 60   : }

  00015	c3		 ret	 0
?initPlugin@@YGHXZ ENDP					; initPlugin
; Function compile flags: /Ogtp
; File c:\hex-rays.ida.pro.advanced.v6.5\idasdk\include\auto.hpp
_TEXT	ENDS
;	COMDAT ?setStat@@YGHH@Z
_TEXT	SEGMENT
?setStat@@YGHH@Z PROC					; setStat, COMDAT
; _st$ = edx

; 108  :   idastate_t old = auto_display.state;

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp__auto_display
  00006	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 109  :   auto_display.state = st;

  00009	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 110  :   return old;
; 111  : }

  0000c	c3		 ret	 0
?setStat@@YGHH@Z ENDP					; setStat
; Function compile flags: /Ogtp
; File c:\hex-rays.ida.pro.advanced.v6.5\idasdk\include\kernwin.hpp
_TEXT	ENDS
;	COMDAT ?vmsg@@YGHPBDPAD@Z
_TEXT	SEGMENT
?vmsg@@YGHPBDPAD@Z PROC					; vmsg, COMDAT
; _format$ = ecx
; _va$ = eax

; 3772 :   return callui(ui_msg, format, va).i;

  00000	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp__callui
  00006	50		 push	 eax
  00007	8b 02		 mov	 eax, DWORD PTR [edx]
  00009	51		 push	 ecx
  0000a	6a 17		 push	 23			; 00000017H
  0000c	ff d0		 call	 eax
  0000e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3773 : }

  00011	c3		 ret	 0
?vmsg@@YGHPBDPAD@Z ENDP					; vmsg
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?vwarning@@YGXPBDPAD@Z
_TEXT	SEGMENT
?vwarning@@YGXPBDPAD@Z PROC				; vwarning, COMDAT
; _format$ = ecx
; _va$ = eax

; 3753 :   callui(ui_mbox, mbox_warning, format, va);

  00000	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp__callui
  00006	50		 push	 eax
  00007	8b 02		 mov	 eax, DWORD PTR [edx]
  00009	51		 push	 ecx
  0000a	6a 02		 push	 2
  0000c	6a 15		 push	 21			; 00000015H
  0000e	ff d0		 call	 eax
  00010	83 c4 10	 add	 esp, 16			; 00000010H

; 3754 : }

  00013	c3		 ret	 0
?vwarning@@YGXPBDPAD@Z ENDP				; vwarning
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?vasktext@@YGPADIPADPBD10@Z
_TEXT	SEGMENT
_size$ = 8						; size = 4
_answer$ = 12						; size = 4
?vasktext@@YGPADIPADPBD10@Z PROC			; vasktext, COMDAT
; _defval$ = edx
; _format$ = ecx
; _va$ = eax

; 3747 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3748 :   return callui(ui_asktext, size, answer, defval, format, va).cptr;

  00003	50		 push	 eax
  00004	8b 45 0c	 mov	 eax, DWORD PTR _answer$[ebp]
  00007	51		 push	 ecx
  00008	8b 4d 08	 mov	 ecx, DWORD PTR _size$[ebp]
  0000b	52		 push	 edx
  0000c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp__callui
  00012	50		 push	 eax
  00013	8b 02		 mov	 eax, DWORD PTR [edx]
  00015	51		 push	 ecx
  00016	6a 1e		 push	 30			; 0000001eH
  00018	ff d0		 call	 eax
  0001a	83 c4 18	 add	 esp, 24			; 00000018H

; 3749 : }

  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
?vasktext@@YGPADIPADPBD10@Z ENDP			; vasktext
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?AskUsingForm_cv@@YGHPBDPAD@Z
_TEXT	SEGMENT
?AskUsingForm_cv@@YGHPBDPAD@Z PROC			; AskUsingForm_cv, COMDAT
; _format$ = ecx
; _va$ = eax

; 3596 :   return callui(ui_form, format, va).i;

  00000	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp__callui
  00006	50		 push	 eax
  00007	8b 02		 mov	 eax, DWORD PTR [edx]
  00009	51		 push	 ecx
  0000a	6a 1a		 push	 26			; 0000001aH
  0000c	ff d0		 call	 eax
  0000e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3597 : }

  00011	c3		 ret	 0
?AskUsingForm_cv@@YGHPBDPAD@Z ENDP			; AskUsingForm_cv
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?hide_wait_box@@YGXXZ
_TEXT	SEGMENT
?hide_wait_box@@YGXXZ PROC				; hide_wait_box, COMDAT

; 3576 :   // stupid watcom requires va_list should not be NULL
; 3577 :   callui(ui_mbox, mbox_hide, NULL, &callui);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__callui
  00005	50		 push	 eax
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	6a 00		 push	 0
  0000a	6a 0a		 push	 10			; 0000000aH
  0000c	6a 15		 push	 21			; 00000015H
  0000e	ff d0		 call	 eax
  00010	83 c4 10	 add	 esp, 16			; 00000010H

; 3578 : }

  00013	c3		 ret	 0
?hide_wait_box@@YGXXZ ENDP				; hide_wait_box
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?show_wait_box_v@@YGXPBDPAD@Z
_TEXT	SEGMENT
?show_wait_box_v@@YGXPBDPAD@Z PROC			; show_wait_box_v, COMDAT
; _format$ = ecx
; _va$ = eax

; 3559 :   callui(ui_mbox, mbox_wait, format, va);

  00000	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp__callui
  00006	50		 push	 eax
  00007	8b 02		 mov	 eax, DWORD PTR [edx]
  00009	51		 push	 ecx
  0000a	6a 09		 push	 9
  0000c	6a 15		 push	 21			; 00000015H
  0000e	ff d0		 call	 eax
  00010	83 c4 10	 add	 esp, 16			; 00000010H

; 3560 : }

  00013	c3		 ret	 0
?show_wait_box_v@@YGXPBDPAD@Z ENDP			; show_wait_box_v
_TEXT	ENDS
PUBLIC	?btDelete@@YGIPAXI@Z				; btDelete
PUBLIC	?getUpdate@@YGIPAXI@Z				; getUpdate
PUBLIC	?getIcon@@YGHPAXI@Z				; getIcon
; Function compile flags: /Ogtp
;	COMDAT ?choose2@@YGIHHHHHPAXHPBHP6GI0@ZP6GX0IPBQAD@ZPBDHIP6GI0I@ZP6GX0@Z6P6GX0I@Z87PBQBDP6GH0I@Z@Z
_TEXT	SEGMENT
?choose2@@YGIHHHHHPAXHPBHP6GI0@ZP6GX0IPBQAD@ZPBDHIP6GI0I@ZP6GX0@Z6P6GX0I@Z87PBQBDP6GH0I@Z@Z PROC ; choose2, COMDAT
; _obj$ = ecx
; _title$ = eax

; 3487 :   return callui(ui_choose, chtype_generic2, flags, x0, y0, x1, y1, obj, ncol,
; 3488 :                 widths, sizer, getl, title, icon, deflt, del, ins,
; 3489 :                 update, edit, enter, destroy, popup_names, get_icon).i32;

  00000	68 00 00 00 00	 push	 OFFSET ?getIcon@@YGHPAXI@Z ; getIcon
  00005	6a 00		 push	 0
  00007	68 00 00 00 00	 push	 OFFSET ?btDestroy@@YGXPAX@Z ; btDestroy
  0000c	68 00 00 00 00	 push	 OFFSET ?btEnter@@YGXPAXI@Z ; btEnter
  00011	68 00 00 00 00	 push	 OFFSET ?btEdit@@YGXPAXI@Z ; btEdit
  00016	68 00 00 00 00	 push	 OFFSET ?getUpdate@@YGIPAXI@Z ; getUpdate
  0001b	6a 00		 push	 0
  0001d	68 00 00 00 00	 push	 OFFSET ?btDelete@@YGIPAXI@Z ; btDelete
  00022	6a 00		 push	 0
  00024	68 a0 00 00 00	 push	 160			; 000000a0H
  00029	50		 push	 eax
  0002a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp__callui
  00030	68 00 00 00 00	 push	 OFFSET ?getDescription@@YGXPAXIPBQAD@Z ; getDescription
  00035	8b 02		 mov	 eax, DWORD PTR [edx]
  00037	68 00 00 00 00	 push	 OFFSET ?getSize@@YGIPAX@Z ; getSize
  0003c	68 00 00 00 00	 push	 OFFSET _widths
  00041	6a 04		 push	 4
  00043	51		 push	 ecx
  00044	6a ff		 push	 -1
  00046	6a ff		 push	 -1
  00048	6a ff		 push	 -1
  0004a	6a ff		 push	 -1
  0004c	6a 00		 push	 0
  0004e	6a 0d		 push	 13			; 0000000dH
  00050	6a 0f		 push	 15			; 0000000fH
  00052	ff d0		 call	 eax
  00054	83 c4 5c	 add	 esp, 92			; 0000005cH

; 3490 : }

  00057	c3		 ret	 0
?choose2@@YGIHHHHHPAXHPBHP6GI0@ZP6GX0IPBQAD@ZPBDHIP6GI0I@ZP6GX0@Z6P6GX0I@Z87PBQBDP6GH0I@Z@Z ENDP ; choose2
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?choose_segm@@YGPAVsegment_t@@PBDI@Z
_TEXT	SEGMENT
?choose_segm@@YGPAVsegment_t@@PBDI@Z PROC		; choose_segm, COMDAT
; _default_ea$ = eax

; 3413 :   return callui(ui_choose, chtype_segm, title, default_ea).segptr;

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp__callui
  00006	8b 11		 mov	 edx, DWORD PTR [ecx]
  00008	50		 push	 eax
  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@OKJPJFGB@Please?5choose?5segment?5to?5get?5com@
  0000e	6a 09		 push	 9
  00010	6a 0f		 push	 15			; 0000000fH
  00012	ff d2		 call	 edx
  00014	83 c4 10	 add	 esp, 16			; 00000010H

; 3414 : }

  00017	c3		 ret	 0
?choose_segm@@YGPAVsegment_t@@PBDI@Z ENDP		; choose_segm
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?get_screen_ea@@YGIXZ
_TEXT	SEGMENT
_ea$ = -4						; size = 4
?get_screen_ea@@YGIXZ PROC				; get_screen_ea, COMDAT

; 2762 : inline ea_t get_screen_ea(void)            { ea_t ea; callui(ui_screenea, &ea); return ea; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp__callui
  0000a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000c	8d 45 fc	 lea	 eax, DWORD PTR _ea$[ebp]
  0000f	50		 push	 eax
  00010	6a 0a		 push	 10			; 0000000aH
  00012	ff d2		 call	 edx
  00014	8b 45 fc	 mov	 eax, DWORD PTR _ea$[ebp]
  00017	83 c4 08	 add	 esp, 8
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?get_screen_ea@@YGIXZ ENDP				; get_screen_ea
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?refresh_idaview_anyway@@YGXXZ
_TEXT	SEGMENT
?refresh_idaview_anyway@@YGXXZ PROC			; refresh_idaview_anyway, COMDAT

; 2760 : inline void refresh_idaview_anyway(void)   { callui(ui_refresh);      }

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__callui
  00005	8b 08		 mov	 ecx, DWORD PTR [eax]
  00007	6a 0e		 push	 14			; 0000000eH
  00009	ff d1		 call	 ecx
  0000b	59		 pop	 ecx
  0000c	c3		 ret	 0
?refresh_idaview_anyway@@YGXXZ ENDP			; refresh_idaview_anyway
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?jumpto@@YG_NIHH@Z
_TEXT	SEGMENT
?jumpto@@YG_NIHH@Z PROC					; jumpto, COMDAT
; _ea$ = eax

; 2754 :   return callui(ui_jumpto, ea, opnum, uijmp_flags).cnd;

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp__callui
  00006	8b 11		 mov	 edx, DWORD PTR [ecx]
  00008	6a 01		 push	 1
  0000a	6a ff		 push	 -1
  0000c	50		 push	 eax
  0000d	68 8b 00 00 00	 push	 139			; 0000008bH
  00012	ff d2		 call	 edx
  00014	83 c4 10	 add	 esp, 16			; 00000010H

; 2755 : }

  00017	c3		 ret	 0
?jumpto@@YG_NIHH@Z ENDP					; jumpto
; Function compile flags: /Ogtp
; File c:\hex-rays.ida.pro.advanced.v6.5\idasdk\include\bytes.hpp
_TEXT	ENDS
;	COMDAT ?has_any_name@@YG_NI@Z
_TEXT	SEGMENT
?has_any_name@@YG_NI@Z PROC				; has_any_name, COMDAT
; _F$ = eax

; 836  : inline bool idaapi has_any_name(flags_t F){ return (F & FF_ANYNAME) != 0; }

  00000	25 00 c0 00 00	 and	 eax, 49152		; 0000c000H
  00005	f7 d8		 neg	 eax
  00007	1b c0		 sbb	 eax, eax
  00009	f7 d8		 neg	 eax
  0000b	c3		 ret	 0
?has_any_name@@YG_NI@Z ENDP				; has_any_name
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?has_cmt@@YG_NI@Z
_TEXT	SEGMENT
?has_cmt@@YG_NI@Z PROC					; has_cmt, COMDAT
; _F$ = eax

; 807  : inline bool idaapi has_cmt(flags_t F)    { return (F & FF_COMM) != 0; }

  00000	c1 e8 0b	 shr	 eax, 11			; 0000000bH
  00003	83 e0 01	 and	 eax, 1
  00006	c3		 ret	 0
?has_cmt@@YG_NI@Z ENDP					; has_cmt
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?isUnknown@@YG_NI@Z
_TEXT	SEGMENT
?isUnknown@@YG_NI@Z PROC				; isUnknown, COMDAT
; _F$ = eax

; 697  : inline bool idaapi isUnknown(flags_t F){return (F & MS_CLS) == FF_UNK;  }

  00000	25 00 06 00 00	 and	 eax, 1536		; 00000600H
  00005	f7 d8		 neg	 eax
  00007	1b c0		 sbb	 eax, eax
  00009	40		 inc	 eax
  0000a	c3		 ret	 0
?isUnknown@@YG_NI@Z ENDP				; isUnknown
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?isData@@YG_NI@Z
_TEXT	SEGMENT
?isData@@YG_NI@Z PROC					; isData, COMDAT
; _F$ = eax

; 683  : inline bool idaapi isData(flags_t F)  { return (F & MS_CLS) == FF_DATA; }

  00000	25 00 06 00 00	 and	 eax, 1536		; 00000600H
  00005	33 c9		 xor	 ecx, ecx
  00007	3d 00 04 00 00	 cmp	 eax, 1024		; 00000400H
  0000c	0f 94 c0	 sete	 al
  0000f	c3		 ret	 0
?isData@@YG_NI@Z ENDP					; isData
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?isCode@@YG_NI@Z
_TEXT	SEGMENT
?isCode@@YG_NI@Z PROC					; isCode, COMDAT
; _F$ = eax

; 677  : inline bool idaapi isCode(flags_t F)  { return (F & MS_CLS) == FF_CODE; }

  00000	25 00 06 00 00	 and	 eax, 1536		; 00000600H
  00005	33 c9		 xor	 ecx, ecx
  00007	3d 00 06 00 00	 cmp	 eax, 1536		; 00000600H
  0000c	0f 94 c0	 sete	 al
  0000f	c3		 ret	 0
?isCode@@YG_NI@Z ENDP					; isCode
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?getFlags@@YGII@Z
_TEXT	SEGMENT
?getFlags@@YGII@Z PROC					; getFlags, COMDAT
; _ea$ = eax

; 264  : inline flags_t idaapi getFlags(ea_t ea) { return get_flags_ex(ea, 0); }

  00000	6a 00		 push	 0
  00002	50		 push	 eax
  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__get_flags_ex@8
  00009	c3		 ret	 0
?getFlags@@YGII@Z ENDP					; getFlags
; Function compile flags: /Ogtp
; File c:\hex-rays.ida.pro.advanced.v6.5\idasdk\include\area.hpp
_TEXT	ENDS
;	COMDAT ?get_area_cmt@areacb_t@@QBEPADPBUarea_t@@_N@Z
_TEXT	SEGMENT
?get_area_cmt@areacb_t@@QBEPADPBUarea_t@@_N@Z PROC	; areacb_t::get_area_cmt, COMDAT
; _this$ = ecx
; _a$ = eax

; 718  :         { return areacb_t_get_area_cmt(this, a, repeatable); }

  00000	6a 01		 push	 1
  00002	50		 push	 eax
  00003	51		 push	 ecx
  00004	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__areacb_t_get_area_cmt@12
  0000a	c3		 ret	 0
?get_area_cmt@areacb_t@@QBEPADPBUarea_t@@_N@Z ENDP	; areacb_t::get_area_cmt
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?set_area_cmt@areacb_t@@QAE_NPBUarea_t@@PBD_N@Z
_TEXT	SEGMENT
?set_area_cmt@areacb_t@@QAE_NPBUarea_t@@PBD_N@Z PROC	; areacb_t::set_area_cmt, COMDAT
; _this$ = edx
; _a$ = ecx
; _cmt$ = eax

; 696  :         { return areacb_t_set_area_cmt(this, a, cmt, repeatable); }

  00000	6a 01		 push	 1
  00002	50		 push	 eax
  00003	51		 push	 ecx
  00004	52		 push	 edx
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__areacb_t_set_area_cmt@16
  0000b	c3		 ret	 0
?set_area_cmt@areacb_t@@QAE_NPBUarea_t@@PBD_N@Z ENDP	; areacb_t::set_area_cmt
; Function compile flags: /Ogtp
; File c:\hex-rays.ida.pro.advanced.v6.5\idasdk\include\nalt.hpp
_TEXT	ENDS
;	COMDAT ?is_tilcmt@@YG_NI@Z
_TEXT	SEGMENT
?is_tilcmt@@YG_NI@Z PROC				; is_tilcmt, COMDAT
; _ea$ = eax

; 334  : IMPL__IS_AFLAG_FUNCS(AFL_TILCMT,   tilcmt)

  00000	50		 push	 eax
  00001	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__get_aflags@4
  00007	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  0000a	83 e0 01	 and	 eax, 1
  0000d	c3		 ret	 0
?is_tilcmt@@YG_NI@Z ENDP				; is_tilcmt
; Function compile flags: /Ogtp
; File c:\hex-rays.ida.pro.advanced.v6.5\idasdk\include\netnode.hpp
_TEXT	ENDS
;	COMDAT ?kill@netnode@@QAEXXZ
_TEXT	SEGMENT
?kill@netnode@@QAEXXZ PROC				; netnode::kill, COMDAT
; _this$ = eax

; 299  :   void kill(void) { netnode_kill(this); }

  00000	50		 push	 eax
  00001	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__netnode_kill@4
  00007	c3		 ret	 0
?kill@netnode@@QAEXXZ ENDP				; netnode::kill
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?create@netnode@@QAE_NPBDI@Z
_TEXT	SEGMENT
?create@netnode@@QAE_NPBDI@Z PROC			; netnode::create, COMDAT
; _this$ = ecx
; __name$ = eax

; 286  :     return netnode_check(this, _name, namlen, true);

  00000	6a 01		 push	 1
  00002	6a 00		 push	 0
  00004	50		 push	 eax
  00005	51		 push	 ecx
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__netnode_check@16

; 287  :   }

  0000c	c3		 ret	 0
?create@netnode@@QAE_NPBDI@Z ENDP			; netnode::create
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??Bnetnode@@QBEIXZ
_TEXT	SEGMENT
??Bnetnode@@QBEIXZ PROC					; netnode::operator unsigned int, COMDAT
; _this$ = eax

; 244  :   operator nodeidx_t() const        { return netnodenumber; }

  00000	8b 00		 mov	 eax, DWORD PTR [eax]
  00002	c3		 ret	 0
??Bnetnode@@QBEIXZ ENDP					; netnode::operator unsigned int
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ??0netnode@@QAE@XZ
_TEXT	SEGMENT
??0netnode@@QAE@XZ PROC					; netnode::netnode, COMDAT
; _this$ = eax

; 233  :   netnode(void)                     { netnodenumber = BADNODE; }

  00000	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
  00006	c3		 ret	 0
??0netnode@@QAE@XZ ENDP					; netnode::netnode
; Function compile flags: /Ogtp
; File c:\hex-rays.ida.pro.advanced.v6.5\idasdk\plugins\commentviewer\source\showcmt.cpp
_TEXT	ENDS
_TEXT	SEGMENT
_obj$ = 8						; size = 4
?btDestroy@@YGXPAX@Z PROC				; btDestroy

; 460  : {

  00020	55		 push	 ebp
  00021	8b ec		 mov	 ebp, esp

; 461  : 
; 462  :     netnode *node = (netnode *)obj;
; 463  :     node->kill();

  00023	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00026	50		 push	 eax
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__netnode_kill@4

; 464  : 
; 465  :     //decrement window number count
; 466  :     winCount--;

  0002d	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  00032	66 01 0d 00 00
	00 00		 add	 WORD PTR ?winCount@@3GA, cx ; winCount

; 467  : }

  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?btDestroy@@YGXPAX@Z ENDP				; btDestroy
; Function compile flags: /Ogtp
; File c:\hex-rays.ida.pro.advanced.v6.5\idasdk\include\kernwin.hpp
_TEXT	ENDS
;	COMDAT ?asktext@@YAPADIPADPBD1ZZ
_TEXT	SEGMENT
_size$ = 8						; size = 4
_answer$ = 12						; size = 4
_format$ = 16						; size = 4
?asktext@@YAPADIPADPBD1ZZ PROC				; asktext, COMDAT
; _defval$ = edx

; 4384 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4385 :   va_list va;
; 4386 :   va_start(va, format);
; 4387 :   char *result = vasktext(size, answer, defval, format, va);

  00003	8b 4d 10	 mov	 ecx, DWORD PTR _format$[ebp]
  00006	8d 45 14	 lea	 eax, DWORD PTR _format$[ebp+4]
  00009	50		 push	 eax
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _answer$[ebp]
  0000d	51		 push	 ecx
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR _size$[ebp]
  00011	52		 push	 edx
  00012	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp__callui
  00018	50		 push	 eax
  00019	8b 02		 mov	 eax, DWORD PTR [edx]
  0001b	51		 push	 ecx
  0001c	6a 1e		 push	 30			; 0000001eH
  0001e	ff d0		 call	 eax
  00020	83 c4 18	 add	 esp, 24			; 00000018H

; 4388 :   va_end(va);
; 4389 :   return result;
; 4390 : }

  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
?asktext@@YAPADIPADPBD1ZZ ENDP				; asktext
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?AskUsingForm_c@@YAHPBDZZ
_TEXT	SEGMENT
_form$ = 8						; size = 4
?AskUsingForm_c@@YAHPBDZZ PROC				; AskUsingForm_c, COMDAT

; 3896 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3897 :   va_list va;
; 3898 :   va_start(va, form);
; 3899 :   int code = AskUsingForm_cv(form, va);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _form$[ebp]
  00006	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp__callui
  0000c	8d 45 0c	 lea	 eax, DWORD PTR _form$[ebp+4]
  0000f	50		 push	 eax
  00010	8b 02		 mov	 eax, DWORD PTR [edx]
  00012	51		 push	 ecx
  00013	6a 1a		 push	 26			; 0000001aH
  00015	ff d0		 call	 eax
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3900 :   va_end(va);
; 3901 :   return code;
; 3902 : }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?AskUsingForm_c@@YAHPBDZZ ENDP				; AskUsingForm_c
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?msg@@YAHPBDZZ
_TEXT	SEGMENT
_format$ = 8						; size = 4
?msg@@YAHPBDZZ PROC					; msg, COMDAT

; 3872 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3873 :   va_list va;
; 3874 :   va_start(va, format);
; 3875 :   int nbytes = vmsg(format, va);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _format$[ebp]
  00006	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp__callui
  0000c	8d 45 0c	 lea	 eax, DWORD PTR _format$[ebp+4]
  0000f	50		 push	 eax
  00010	8b 02		 mov	 eax, DWORD PTR [edx]
  00012	51		 push	 ecx
  00013	6a 17		 push	 23			; 00000017H
  00015	ff d0		 call	 eax
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3876 :   va_end(va);
; 3877 :   return nbytes;
; 3878 : }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
?msg@@YAHPBDZZ ENDP					; msg
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?warning@@YAXPBDZZ
_TEXT	SEGMENT
_format$ = 8						; size = 4
?warning@@YAXPBDZZ PROC					; warning, COMDAT

; 3824 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3825 :   va_list va;
; 3826 :   va_start(va, format);
; 3827 :   vwarning(format, va);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _format$[ebp]
  00006	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp__callui
  0000c	8d 45 0c	 lea	 eax, DWORD PTR _format$[ebp+4]
  0000f	50		 push	 eax
  00010	8b 02		 mov	 eax, DWORD PTR [edx]
  00012	51		 push	 ecx
  00013	6a 02		 push	 2
  00015	6a 15		 push	 21			; 00000015H
  00017	ff d0		 call	 eax
  00019	83 c4 10	 add	 esp, 16			; 00000010H

; 3828 :   va_end(va);
; 3829 : }

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?warning@@YAXPBDZZ ENDP					; warning
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?show_wait_box@@YAXPBDZZ
_TEXT	SEGMENT
_format$ = 8						; size = 4
?show_wait_box@@YAXPBDZZ PROC				; show_wait_box, COMDAT

; 3564 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3565 :   va_list va;
; 3566 :   va_start(va, format);
; 3567 :   show_wait_box_v(format, va);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _format$[ebp]
  00006	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp__callui
  0000c	8d 45 0c	 lea	 eax, DWORD PTR _format$[ebp+4]
  0000f	50		 push	 eax
  00010	8b 02		 mov	 eax, DWORD PTR [edx]
  00012	51		 push	 ecx
  00013	6a 09		 push	 9
  00015	6a 15		 push	 21			; 00000015H
  00017	ff d0		 call	 eax
  00019	83 c4 10	 add	 esp, 16			; 00000010H

; 3568 :   va_end(va);
; 3569 : }

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?show_wait_box@@YAXPBDZZ ENDP				; show_wait_box
; Function compile flags: /Ogtp
; File c:\hex-rays.ida.pro.advanced.v6.5\idasdk\include\funcs.hpp
_TEXT	ENDS
;	COMDAT ?set_func_cmt@@YG_NPAVfunc_t@@PBD_N@Z
_TEXT	SEGMENT
?set_func_cmt@@YG_NPAVfunc_t@@PBD_N@Z PROC		; set_func_cmt, COMDAT
; _fn$ = ecx
; _cmt$ = eax

; 284  :                 { return funcs.set_area_cmt(fn, cmt, repeatable); }

  00000	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp__funcs
  00006	6a 01		 push	 1
  00008	50		 push	 eax
  00009	51		 push	 ecx
  0000a	52		 push	 edx
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__areacb_t_set_area_cmt@16
  00011	c3		 ret	 0
?set_func_cmt@@YG_NPAVfunc_t@@PBD_N@Z ENDP		; set_func_cmt
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?get_func_cmt@@YGPADPAVfunc_t@@_N@Z
_TEXT	SEGMENT
?get_func_cmt@@YGPADPAVfunc_t@@_N@Z PROC		; get_func_cmt, COMDAT
; _fn$ = eax

; 275  :                 { return funcs.get_area_cmt(fn, repeatable); }

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp__funcs
  00006	6a 01		 push	 1
  00008	50		 push	 eax
  00009	51		 push	 ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__areacb_t_get_area_cmt@12
  00010	c3		 ret	 0
?get_func_cmt@@YGPADPAVfunc_t@@_N@Z ENDP		; get_func_cmt
; Function compile flags: /Ogtp
; File c:\hex-rays.ida.pro.advanced.v6.5\idasdk\include\bytes.hpp
_TEXT	ENDS
;	COMDAT ?isFunc@@YG_NI@Z
_TEXT	SEGMENT
?isFunc@@YG_NI@Z PROC					; isFunc, COMDAT
; _F$ = eax

; 1622 : inline bool idaapi isFunc(flags_t F)      { return isCode(F) && (F & FF_FUNC) != 0; }

  00000	8b c8		 mov	 ecx, eax
  00002	81 e1 00 06 00
	00		 and	 ecx, 1536		; 00000600H
  00008	81 f9 00 06 00
	00		 cmp	 ecx, 1536		; 00000600H
  0000e	75 0d		 jne	 SHORT $LN3@isFunc
  00010	a9 00 00 00 10	 test	 eax, 268435456		; 10000000H
  00015	74 06		 je	 SHORT $LN3@isFunc
  00017	b8 01 00 00 00	 mov	 eax, 1
  0001c	c3		 ret	 0
$LN3@isFunc:
  0001d	33 c0		 xor	 eax, eax
  0001f	c3		 ret	 0
?isFunc@@YG_NI@Z ENDP					; isFunc
; Function compile flags: /Ogtp
; File c:\hex-rays.ida.pro.advanced.v6.5\idasdk\include\netnode.hpp
_TEXT	ENDS
;	COMDAT ?supshift@netnode@@QAEIIIID@Z
_TEXT	SEGMENT
_from$ = 8						; size = 4
?supshift@netnode@@QAEIIIID@Z PROC			; netnode::supshift, COMDAT
; _this$ = eax
; _to$ = edx
; _size$ = ecx

; 678  :     { return netnode_supshift(*this, from, to, size, tag); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 00		 mov	 eax, DWORD PTR [eax]
  00005	6a 53		 push	 83			; 00000053H
  00007	51		 push	 ecx
  00008	8b 4d 08	 mov	 ecx, DWORD PTR _from$[ebp]
  0000b	52		 push	 edx
  0000c	51		 push	 ecx
  0000d	50		 push	 eax
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__netnode_supshift@20
  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
?supshift@netnode@@QAEIIIID@Z ENDP			; netnode::supshift
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?supset@netnode@@QAE_NIPBXID@Z
_TEXT	SEGMENT
_alt$ = 8						; size = 4
_value$ = 12						; size = 4
?supset@netnode@@QAE_NIPBXID@Z PROC			; netnode::supset, COMDAT
; _this$ = eax
; _length$ = edx
; _tag$ = ecx

; 623  :         { return netnode_supset(*this, alt, value, length, tag); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 00		 mov	 eax, DWORD PTR [eax]
  00005	51		 push	 ecx
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _value$[ebp]
  00009	52		 push	 edx
  0000a	8b 55 08	 mov	 edx, DWORD PTR _alt$[ebp]
  0000d	51		 push	 ecx
  0000e	52		 push	 edx
  0000f	50		 push	 eax
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__netnode_supset@20
  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
?supset@netnode@@QAE_NIPBXID@Z ENDP			; netnode::supset
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?supval@netnode@@QBEHIPAXID@Z
_TEXT	SEGMENT
?supval@netnode@@QBEHIPAXID@Z PROC			; netnode::supval, COMDAT
; _this$ = eax
; _alt$ = edx
; _buf$ = ecx

; 585  :         { return netnode_supval(*this, alt, buf, bufsize, tag); }

  00000	8b 00		 mov	 eax, DWORD PTR [eax]
  00002	6a 53		 push	 83			; 00000053H
  00004	68 00 04 00 00	 push	 1024			; 00000400H
  00009	51		 push	 ecx
  0000a	52		 push	 edx
  0000b	50		 push	 eax
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__netnode_supval@20
  00012	c3		 ret	 0
?supval@netnode@@QBEHIPAXID@Z ENDP			; netnode::supval
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?altshift@netnode@@QAEIIIID@Z
_TEXT	SEGMENT
_from$ = 8						; size = 4
?altshift@netnode@@QAEIIIID@Z PROC			; netnode::altshift, COMDAT
; _this$ = eax
; _to$ = edx
; _size$ = ecx

; 486  :   {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 487  :     return netnode_altshift(*this, from, to, size, tag);

  00003	8b 00		 mov	 eax, DWORD PTR [eax]
  00005	6a 41		 push	 65			; 00000041H
  00007	51		 push	 ecx
  00008	8b 4d 08	 mov	 ecx, DWORD PTR _from$[ebp]
  0000b	52		 push	 edx
  0000c	51		 push	 ecx
  0000d	50		 push	 eax
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__netnode_altshift@20

; 488  :   }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
?altshift@netnode@@QAEIIIID@Z ENDP			; netnode::altshift
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?altset@netnode@@QAE_NIID@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
?altset@netnode@@QAE_NIID@Z PROC			; netnode::altset, COMDAT
; _this$ = eax
; _alt$ = edx

; 418  :   {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 419  :     return supset(alt, &value, sizeof(value), tag);

  00003	8b 00		 mov	 eax, DWORD PTR [eax]
  00005	6a 41		 push	 65			; 00000041H
  00007	6a 04		 push	 4
  00009	8d 4d 08	 lea	 ecx, DWORD PTR _value$[ebp]
  0000c	51		 push	 ecx
  0000d	52		 push	 edx
  0000e	50		 push	 eax
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__netnode_supset@20

; 420  :   }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?altset@netnode@@QAE_NIID@Z ENDP			; netnode::altset
; Function compile flags: /Ogtp
_TEXT	ENDS
;	COMDAT ?altval@netnode@@QBEIID@Z
_TEXT	SEGMENT
?altval@netnode@@QBEIID@Z PROC				; netnode::altval, COMDAT
; _this$ = eax
; _alt$ = ecx

; 406  :     return netnode_altval(*this, alt, tag);

  00000	8b 00		 mov	 eax, DWORD PTR [eax]
  00002	6a 41		 push	 65			; 00000041H
  00004	51		 push	 ecx
  00005	50		 push	 eax
  00006	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__netnode_altval@12

; 407  :   }

  0000c	c3		 ret	 0
?altval@netnode@@QBEIID@Z ENDP				; netnode::altval
; Function compile flags: /Ogtp
; File c:\hex-rays.ida.pro.advanced.v6.5\idasdk\plugins\commentviewer\source\showcmt.cpp
_TEXT	ENDS
_TEXT	SEGMENT
_obj$ = 8						; size = 4
_n$ = 12						; size = 4
?btEnter@@YGXPAXI@Z PROC				; btEnter

; 390  : {

  00040	55		 push	 ebp
  00041	8b ec		 mov	 ebp, esp

; 391  :     //msg("enter(%u)\n",n);
; 392  :     netnode *node = (netnode *)obj;
; 393  :     jumpto(node->altval(n-1));

  00043	8b 4d 0c	 mov	 ecx, DWORD PTR _n$[ebp]
  00046	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00049	8b 00		 mov	 eax, DWORD PTR [eax]
  0004b	6a 41		 push	 65			; 00000041H
  0004d	49		 dec	 ecx
  0004e	51		 push	 ecx
  0004f	50		 push	 eax
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__netnode_altval@12
  00056	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp__callui
  0005c	6a 01		 push	 1
  0005e	6a ff		 push	 -1
  00060	50		 push	 eax
  00061	8b 02		 mov	 eax, DWORD PTR [edx]
  00063	68 8b 00 00 00	 push	 139			; 0000008bH
  00068	ff d0		 call	 eax
  0006a	83 c4 10	 add	 esp, 16			; 00000010H

; 394  : }

  0006d	5d		 pop	 ebp
  0006e	c2 08 00	 ret	 8
?btEnter@@YGXPAXI@Z ENDP				; btEnter
; Function compile flags: /Ogtp
_obj$ = 8						; size = 4
?getSize@@YGIPAX@Z PROC					; getSize

; 266  : {

  00080	55		 push	 ebp
  00081	8b ec		 mov	 ebp, esp

; 267  :     //msg("size()!\n");
; 268  :     netnode *node = (netnode *)obj;
; 269  :     return node->altval(-1);       // we have saved the number in altval(-1)

  00083	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00086	8b 00		 mov	 eax, DWORD PTR [eax]
  00088	6a 41		 push	 65			; 00000041H
  0008a	6a ff		 push	 -1
  0008c	50		 push	 eax
  0008d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__netnode_altval@12

; 270  : }

  00093	5d		 pop	 ebp
  00094	c2 04 00	 ret	 4
?getSize@@YGIPAX@Z ENDP					; getSize
_TEXT	ENDS
PUBLIC	?IsComment@@YG_NIPAX@Z				; IsComment
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_flags$ = 8						; size = 4
_ud$ = 12						; size = 4
?IsComment@@YG_NIPAX@Z PROC				; IsComment

; 177  : {

  000a0	55		 push	 ebp
  000a1	8b ec		 mov	 ebp, esp

; 178  :     return (has_cmt(flags) || isFunc(flags));

  000a3	8b 45 08	 mov	 eax, DWORD PTR _flags$[ebp]
  000a6	8b c8		 mov	 ecx, eax
  000a8	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  000ab	f6 c1 01	 test	 cl, 1
  000ae	75 1d		 jne	 SHORT $LN3@IsComment
  000b0	8b d0		 mov	 edx, eax
  000b2	81 e2 00 06 00
	00		 and	 edx, 1536		; 00000600H
  000b8	81 fa 00 06 00
	00		 cmp	 edx, 1536		; 00000600H
  000be	75 07		 jne	 SHORT $LN9@IsComment
  000c0	a9 00 00 00 10	 test	 eax, 268435456		; 10000000H
  000c5	75 06		 jne	 SHORT $LN3@IsComment
$LN9@IsComment:
  000c7	33 c0		 xor	 eax, eax

; 179  : }

  000c9	5d		 pop	 ebp
  000ca	c2 08 00	 ret	 8
$LN3@IsComment:

; 178  :     return (has_cmt(flags) || isFunc(flags));

  000cd	b8 01 00 00 00	 mov	 eax, 1

; 179  : }

  000d2	5d		 pop	 ebp
  000d3	c2 08 00	 ret	 8
?IsComment@@YG_NIPAX@Z ENDP				; IsComment
_TEXT	ENDS
PUBLIC	?GetCommentType@@YGHI@Z				; GetCommentType
; Function compile flags: /Ogtp
_TEXT	SEGMENT
?GetCommentType@@YGHI@Z PROC				; GetCommentType
; _ea$ = esi

; 82   : {

  000e0	57		 push	 edi

; 83   : 
; 84   :     flags_t tflag = getFlags(ea);

  000e1	6a 00		 push	 0
  000e3	56		 push	 esi
  000e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__get_flags_ex@8

; 85   :     func_t *fct = getn_func(get_func_num(ea));

  000ea	56		 push	 esi
  000eb	8b f8		 mov	 edi, eax
  000ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__get_func_num@4
  000f3	50		 push	 eax
  000f4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__getn_func@4

; 86   :     
; 87   :     
; 88   :     //we scan first for procedure comments
; 89   :     //because if there is a non repeatable comment at first line
; 90   :     //of the procedure then Ida doesn't set it as comment for the 
; 91   :     //proc so it will appear as a normal comment instead 
; 92   :     //of a proc comment
; 93   :     // to be quick: fct comments have priority
; 94   : 
; 95   :     if (fct != NULL &&						// we got a procedure?
; 96   :         fct->startEA ==ea &&				// only show first instruction?
; 97   :         get_func_cmt(fct, true)!=NULL)		// it has comment?

  000fa	85 c0		 test	 eax, eax
  000fc	74 1e		 je	 SHORT $LN16@GetComment
  000fe	39 30		 cmp	 DWORD PTR [eax], esi
  00100	75 1a		 jne	 SHORT $LN16@GetComment
  00102	6a 01		 push	 1
  00104	50		 push	 eax
  00105	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__funcs
  0010a	50		 push	 eax
  0010b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__areacb_t_get_area_cmt@12
  00111	85 c0		 test	 eax, eax
  00113	74 07		 je	 SHORT $LN16@GetComment

; 98   :         
; 99   :         return PROC_COMMENT;

  00115	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0011a	5f		 pop	 edi

; 109  : }

  0011b	c3		 ret	 0
$LN16@GetComment:
  0011c	53		 push	 ebx

; 100  :     
; 101  :     if (has_cmt(tflag) && get_cmt(ea, false, NULL, MAXSTR) != -1)

  0011d	8b df		 mov	 ebx, edi
  0011f	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__get_cmt@16
  00125	c1 eb 0b	 shr	 ebx, 11			; 0000000bH
  00128	80 e3 01	 and	 bl, 1
  0012b	74 19		 je	 SHORT $LN2@GetComment
  0012d	68 00 04 00 00	 push	 1024			; 00000400H
  00132	6a 00		 push	 0
  00134	6a 00		 push	 0
  00136	56		 push	 esi
  00137	ff d7		 call	 edi
  00139	83 f8 ff	 cmp	 eax, -1
  0013c	74 08		 je	 SHORT $LN2@GetComment

; 102  :         return INST_NORM_COMMENT;

  0013e	5b		 pop	 ebx
  0013f	b8 01 00 00 00	 mov	 eax, 1
  00144	5f		 pop	 edi

; 109  : }

  00145	c3		 ret	 0
$LN2@GetComment:

; 103  :     
; 104  :     if (has_cmt(tflag) && get_cmt(ea, true, NULL, MAXSTR) != -1)

  00146	84 db		 test	 bl, bl
  00148	74 19		 je	 SHORT $LN1@GetComment
  0014a	68 00 04 00 00	 push	 1024			; 00000400H
  0014f	6a 00		 push	 0
  00151	6a 01		 push	 1
  00153	56		 push	 esi
  00154	ff d7		 call	 edi
  00156	83 f8 ff	 cmp	 eax, -1
  00159	74 08		 je	 SHORT $LN1@GetComment

; 105  :         return INST_REP_COMMENT;

  0015b	5b		 pop	 ebx
  0015c	b8 02 00 00 00	 mov	 eax, 2
  00161	5f		 pop	 edi

; 109  : }

  00162	c3		 ret	 0
$LN1@GetComment:
  00163	5b		 pop	 ebx

; 106  : 
; 107  :    
; 108  :     return NO_COMMENT;

  00164	33 c0		 xor	 eax, eax
  00166	5f		 pop	 edi

; 109  : }

  00167	c3		 ret	 0
?GetCommentType@@YGHI@Z ENDP				; GetCommentType
_TEXT	ENDS
PUBLIC	?ShowBanner@@YGXXZ				; ShowBanner
; Function compile flags: /Ogtp
_TEXT	SEGMENT
?ShowBanner@@YGXXZ PROC					; ShowBanner

; 44   :     msg(" *********************************************\n");

  00170	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@GKEMENKJ@?5?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@
  00175	e8 00 00 00 00	 call	 ?msg@@YAHPBDZZ		; msg

; 45   :     msg(" *** CommentViewer v.0.2 (c) bLaCk-eye/RET ***\n");

  0017a	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@EBMLBBCP@?5?$CK?$CK?$CK?5CommentViewer?5v?40?42?5?$CIc?$CJ?5bLa@
  0017f	e8 00 00 00 00	 call	 ?msg@@YAHPBDZZ		; msg

; 46   :     msg(" *** Bugs, suggestions : bLaCk@reteam.org  ***\n");

  00184	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@BDAIMFLC@?5?$CK?$CK?$CK?5Bugs?0?5suggestions?5?3?5bLaCk?$EAr@
  00189	e8 00 00 00 00	 call	 ?msg@@YAHPBDZZ		; msg

; 47   :     msg(" *********************************************\n");

  0018e	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@GKEMENKJ@?5?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@
  00193	e8 00 00 00 00	 call	 ?msg@@YAHPBDZZ		; msg
  00198	83 c4 10	 add	 esp, 16			; 00000010H

; 48   : }

  0019b	c3		 ret	 0
?ShowBanner@@YGXXZ ENDP					; ShowBanner
; Function compile flags: /Ogtp
_obj$ = 8						; size = 4
_n$ = 12						; size = 4
?getIcon@@YGHPAXI@Z PROC				; getIcon

; 475  : {

  001a0	55		 push	 ebp
  001a1	8b ec		 mov	 ebp, esp

; 476  :     netnode *node = (netnode *)obj;
; 477  : 
; 478  :     if (n==0)

  001a3	8b 4d 0c	 mov	 ecx, DWORD PTR _n$[ebp]
  001a6	85 c9		 test	 ecx, ecx
  001a8	75 06		 jne	 SHORT $LN7@getIcon

; 479  :         return n;

  001aa	33 c0		 xor	 eax, eax

; 502  :    
; 503  : }

  001ac	5d		 pop	 ebp
  001ad	c2 08 00	 ret	 8
$LN7@getIcon:

; 480  : 
; 481  :     ea_t paddr = node->altval(n-1);

  001b0	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  001b3	8b 00		 mov	 eax, DWORD PTR [eax]
  001b5	53		 push	 ebx
  001b6	56		 push	 esi
  001b7	6a 41		 push	 65			; 00000041H
  001b9	49		 dec	 ecx
  001ba	51		 push	 ecx
  001bb	50		 push	 eax
  001bc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__netnode_altval@12
  001c2	8b f0		 mov	 esi, eax

; 482  : 
; 483  :     // get comment type
; 484  :     int cmttype = GetCommentType(paddr);

  001c4	e8 00 00 00 00	 call	 ?GetCommentType@@YGHI@Z	; GetCommentType
  001c9	8b d8		 mov	 ebx, eax

; 485  : 
; 486  :     if (cmttype == NO_COMMENT)

  001cb	85 db		 test	 ebx, ebx
  001cd	75 09		 jne	 SHORT $LN6@getIcon

; 487  :         return ICON_NO_CMT;

  001cf	5e		 pop	 esi
  001d0	8d 43 20	 lea	 eax, DWORD PTR [ebx+32]
  001d3	5b		 pop	 ebx

; 502  :    
; 503  : }

  001d4	5d		 pop	 ebp
  001d5	c2 08 00	 ret	 8
$LN6@getIcon:
  001d8	57		 push	 edi

; 488  : 
; 489  :     if (isCode(getFlags(paddr)))

  001d9	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__get_flags_ex@8
  001df	6a 00		 push	 0
  001e1	56		 push	 esi
  001e2	ff d7		 call	 edi
  001e4	25 00 06 00 00	 and	 eax, 1536		; 00000600H
  001e9	3d 00 06 00 00	 cmp	 eax, 1536		; 00000600H
  001ee	75 14		 jne	 SHORT $LN3@getIcon

; 490  :     {
; 491  :         if (cmttype == PROC_COMMENT)

  001f0	8d 43 f0	 lea	 eax, DWORD PTR [ebx-16]
  001f3	f7 d8		 neg	 eax
  001f5	1b c0		 sbb	 eax, eax
  001f7	5f		 pop	 edi
  001f8	83 e0 f9	 and	 eax, -7			; fffffff9H
  001fb	5e		 pop	 esi
  001fc	83 c0 51	 add	 eax, 81			; 00000051H
  001ff	5b		 pop	 ebx

; 502  :    
; 503  : }

  00200	5d		 pop	 ebp
  00201	c2 08 00	 ret	 8
$LN3@getIcon:

; 492  :             return ICON_PROC_CMT;
; 493  :         else
; 494  :             return ICON_CODE_CMT;
; 495  :     }
; 496  : 
; 497  :     if (isData(getFlags(paddr)))

  00204	6a 00		 push	 0
  00206	56		 push	 esi
  00207	ff d7		 call	 edi
  00209	25 00 06 00 00	 and	 eax, 1536		; 00000600H
  0020e	3d 00 04 00 00	 cmp	 eax, 1024		; 00000400H
  00213	75 0c		 jne	 SHORT $LN2@getIcon

; 498  :         return ICON_DATA_CMT;

  00215	5f		 pop	 edi
  00216	5e		 pop	 esi
  00217	b8 4f 00 00 00	 mov	 eax, 79			; 0000004fH
  0021c	5b		 pop	 ebx

; 502  :    
; 503  : }

  0021d	5d		 pop	 ebp
  0021e	c2 08 00	 ret	 8
$LN2@getIcon:

; 499  : 
; 500  :     if (isUnknown(getFlags(paddr)))

  00221	6a 00		 push	 0
  00223	56		 push	 esi
  00224	ff d7		 call	 edi
  00226	a9 00 06 00 00	 test	 eax, 1536		; 00000600H
  0022b	75 05		 jne	 SHORT $LN28@getIcon

; 501  :         return ICON_UNKN_CMT;

  0022d	b8 1c 00 00 00	 mov	 eax, 28			; 0000001cH
$LN28@getIcon:
  00232	5f		 pop	 edi
  00233	5e		 pop	 esi
  00234	5b		 pop	 ebx

; 502  :    
; 503  : }

  00235	5d		 pop	 ebp
  00236	c2 08 00	 ret	 8
?getIcon@@YGHPAXI@Z ENDP				; getIcon
_TEXT	ENDS
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_name$51941 = -2048					; size = 1024
_info$51940 = -1024					; size = 1024
_obj$ = 8						; size = 4
_n$ = 12						; size = 4
tv157 = 16						; size = 4
_arrptr$ = 16						; size = 4
?getDescription@@YGXPAXIPBQAD@Z PROC			; getDescription

; 280  : {

  00240	55		 push	 ebp
  00241	8b ec		 mov	 ebp, esp
  00243	81 ec 00 08 00
	00		 sub	 esp, 2048		; 00000800H
  00249	53		 push	 ebx
  0024a	56		 push	 esi

; 281  :     netnode *node = (netnode *)obj;   
; 282  :     //msg("getDescription(%.8x)\n", n);
; 283  :     // generate the column headers
; 284  :     if ( n == 0 )

  0024b	8b 75 0c	 mov	 esi, DWORD PTR _n$[ebp]
  0024e	57		 push	 edi
  0024f	85 f6		 test	 esi, esi
  00251	75 30		 jne	 SHORT $LN22@getDescrip

; 285  :     {
; 286  :         for ( int i=0; i < qnumber(header); i++ )

  00253	8b 75 10	 mov	 esi, DWORD PTR _arrptr$[ebp]
  00256	bf 00 00 00 00	 mov	 edi, OFFSET _header
  0025b	2b fe		 sub	 edi, esi
  0025d	bb 04 00 00 00	 mov	 ebx, 4
$LL21@getDescrip:

; 287  :             qstrncpy(arrptr[i], header[i], MAXSTR);

  00262	8b 04 37	 mov	 eax, DWORD PTR [edi+esi]
  00265	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00267	68 00 04 00 00	 push	 1024			; 00000400H
  0026c	50		 push	 eax
  0026d	51		 push	 ecx
  0026e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__qstrncpy@12
  00274	83 c6 04	 add	 esi, 4
  00277	4b		 dec	 ebx
  00278	75 e8		 jne	 SHORT $LL21@getDescrip
  0027a	5f		 pop	 edi
  0027b	5e		 pop	 esi
  0027c	5b		 pop	 ebx

; 381  :     }    
; 382  : }

  0027d	8b e5		 mov	 esp, ebp
  0027f	5d		 pop	 ebp
  00280	c2 0c 00	 ret	 12			; 0000000cH
$LN22@getDescrip:

; 288  :         return;
; 289  :     }
; 290  :         
; 291  :     //any entries in the list?
; 292  :     if (!node->altval(-1))

  00283	8b 7d 08	 mov	 edi, DWORD PTR _obj$[ebp]
  00286	8b 07		 mov	 eax, DWORD PTR [edi]
  00288	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__netnode_altval@12
  0028e	6a 41		 push	 65			; 00000041H
  00290	6a ff		 push	 -1
  00292	50		 push	 eax
  00293	ff d3		 call	 ebx
  00295	85 c0		 test	 eax, eax
  00297	0f 84 34 02 00
	00		 je	 $LN1@getDescrip

; 293  :         return;
; 294  :     
; 295  :     // get address 
; 296  :     ea_t ea = node->altval(n-1);

  0029d	8b 07		 mov	 eax, DWORD PTR [edi]
  0029f	6a 41		 push	 65			; 00000041H
  002a1	4e		 dec	 esi
  002a2	56		 push	 esi
  002a3	50		 push	 eax
  002a4	ff d3		 call	 ebx
  002a6	8b d8		 mov	 ebx, eax

; 297  : 
; 298  :     if (ea==BADADDR)

  002a8	83 fb ff	 cmp	 ebx, -1
  002ab	0f 84 20 02 00
	00		 je	 $LN1@getDescrip

; 299  :         return;
; 300  : 
; 301  :     // get options
; 302  :     short options = node->altval(-4);

  002b1	8b 17		 mov	 edx, DWORD PTR [edi]
  002b3	6a 41		 push	 65			; 00000041H
  002b5	6a fc		 push	 -4			; fffffffcH
  002b7	52		 push	 edx
  002b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__netnode_altval@12

; 303  : 
; 304  :     node->supval(n-1, arrptr[INDEX_COMMENT], MAXSTR);

  002be	8b 45 10	 mov	 eax, DWORD PTR _arrptr$[ebp]
  002c1	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  002c4	8b 17		 mov	 edx, DWORD PTR [edi]
  002c6	6a 53		 push	 83			; 00000053H
  002c8	68 00 04 00 00	 push	 1024			; 00000400H
  002cd	51		 push	 ecx
  002ce	56		 push	 esi
  002cf	52		 push	 edx
  002d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__netnode_supval@20

; 305  :     
; 306  :     // get comment type
; 307  :     int cmttype = GetCommentType(ea);

  002d6	8b f3		 mov	 esi, ebx
  002d8	e8 00 00 00 00	 call	 ?GetCommentType@@YGHI@Z	; GetCommentType

; 308  : 
; 309  :     
; 310  :     //qsnprintf(arrptr[INDEX_ADDRESS], MAXSTR, "%08a", ea);
; 311  :     get_nice_colored_name(ea, arrptr[INDEX_ADDRESS], MAXSTR, GNCN_NOCOLOR | GNCN_NOFUNC | GNCN_NOLABEL);

  002dd	8b 7d 10	 mov	 edi, DWORD PTR _arrptr$[ebp]
  002e0	6a 0e		 push	 14			; 0000000eH
  002e2	8b f0		 mov	 esi, eax
  002e4	8b 07		 mov	 eax, DWORD PTR [edi]
  002e6	68 00 04 00 00	 push	 1024			; 00000400H
  002eb	50		 push	 eax
  002ec	53		 push	 ebx
  002ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__get_nice_colored_name@16

; 312  :     
; 313  :     if (cmttype == INST_NORM_COMMENT)
; 314  :         qstrncpy(arrptr[INDEX_CMT_TYPE], ".", MAXSTR);

  002f3	68 00 04 00 00	 push	 1024			; 00000400H
  002f8	83 fe 01	 cmp	 esi, 1
  002fb	0f 85 ac 00 00
	00		 jne	 $LN16@getDescrip
  00301	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00304	68 00 00 00 00	 push	 OFFSET ??_C@_01LFCBOECM@?4?$AA@
  00309	51		 push	 ecx
  0030a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__qstrncpy@12
$LN57@getDescrip:

; 327  : 
; 328  :     }
; 329  :     else
; 330  :     {
; 331  :         char info[MAXSTR]={0};

  00310	68 ff 03 00 00	 push	 1023			; 000003ffH
  00315	8d 85 01 fc ff
	ff		 lea	 eax, DWORD PTR _info$51940[ebp+1]
  0031b	6a 00		 push	 0
  0031d	50		 push	 eax
  0031e	c6 85 00 fc ff
	ff 00		 mov	 BYTE PTR _info$51940[ebp], 0
  00325	e8 00 00 00 00	 call	 _memset

; 332  :         char name[MAXSTR]={0};

  0032a	68 ff 03 00 00	 push	 1023			; 000003ffH
  0032f	8d 8d 01 f8 ff
	ff		 lea	 ecx, DWORD PTR _name$51941[ebp+1]
  00335	6a 00		 push	 0
  00337	51		 push	 ecx
  00338	c6 85 00 f8 ff
	ff 00		 mov	 BYTE PTR _name$51941[ebp], 0
  0033f	e8 00 00 00 00	 call	 _memset
  00344	83 c4 18	 add	 esp, 24			; 00000018H

; 333  :         
; 334  :         //get single line representation of the disasm/data
; 335  :         //SetComment(ea, "");
; 336  :         generate_disasm_line(ea, info, MAXSTR, 0);

  00347	6a 00		 push	 0
  00349	68 00 04 00 00	 push	 1024			; 00000400H
  0034e	8d 95 00 fc ff
	ff		 lea	 edx, DWORD PTR _info$51940[ebp]
  00354	52		 push	 edx
  00355	53		 push	 ebx
  00356	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__generate_disasm_line@16

; 337  :         tag_remove(info, info, MAXSTR);

  0035c	68 00 04 00 00	 push	 1024			; 00000400H
  00361	8d 85 00 fc ff
	ff		 lea	 eax, DWORD PTR _info$51940[ebp]
  00367	50		 push	 eax
  00368	8b c8		 mov	 ecx, eax
  0036a	51		 push	 ecx
  0036b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__tag_remove@12

; 338  :         //SetComment(ea, arrptr[INDEX_COMMENT]);
; 339  : 
; 340  :         int quotes=0;
; 341  :         //remove comment from our instruction text
; 342  :         for(int i = 0; i< strlen(info); i++)

  00371	8d 85 00 fc ff
	ff		 lea	 eax, DWORD PTR _info$51940[ebp]
  00377	33 ff		 xor	 edi, edi
  00379	33 f6		 xor	 esi, esi
  0037b	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0037e	8b ff		 npad	 2
$LL53@getDescrip:
  00380	8a 08		 mov	 cl, BYTE PTR [eax]
  00382	40		 inc	 eax
  00383	84 c9		 test	 cl, cl
  00385	75 f9		 jne	 SHORT $LL53@getDescrip
  00387	2b c2		 sub	 eax, edx
  00389	0f 84 8b 00 00
	00		 je	 $LN56@getDescrip
  0038f	b2 2f		 mov	 dl, 47			; 0000002fH
$LL10@getDescrip:

; 343  :         {
; 344  :             //in .net we can have instructions like
; 345  :             // ldstr "http://www.datarescue.com"
; 346  :             // so we skip strings
; 347  :             if (info[i]== '"')

  00391	8a 8c 35 00 fc
	ff ff		 mov	 cl, BYTE PTR _info$51940[ebp+esi]
  00398	80 f9 22	 cmp	 cl, 34			; 00000022H
  0039b	75 58		 jne	 SHORT $LN7@getDescrip

; 348  :                 quotes = (quotes+1)%2;

  0039d	47		 inc	 edi
  0039e	81 e7 01 00 00
	80		 and	 edi, -2147483647	; 80000001H
  003a4	79 65		 jns	 SHORT $LN9@getDescrip
  003a6	4f		 dec	 edi
  003a7	83 cf fe	 or	 edi, -2			; fffffffeH
  003aa	47		 inc	 edi

; 349  :             else

  003ab	eb 5e		 jmp	 SHORT $LN9@getDescrip
$LN16@getDescrip:

; 315  :     else
; 316  :         qstrncpy(arrptr[INDEX_CMT_TYPE], "R", MAXSTR);

  003ad	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  003b0	68 00 00 00 00	 push	 OFFSET ??_C@_01DGKLNCNG@R?$AA@
  003b5	52		 push	 edx
  003b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__qstrncpy@12

; 317  : 
; 318  : 
; 319  :     if (cmttype == PROC_COMMENT)

  003bc	83 fe 10	 cmp	 esi, 16			; 00000010H
  003bf	0f 85 4b ff ff
	ff		 jne	 $LN57@getDescrip

; 320  :     {
; 321  :         // don't put code or data, just name of the procedure	     
; 322  :         if (options & SHOW_FUNC_DECLART & INST_REP_COMMENT)
; 323  :             print_type(ea, arrptr[INDEX_CODE_DATA], MAXSTR, true);
; 324  : 
; 325  :         if (!strlen(arrptr[INDEX_CODE_DATA]))

  003c5	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  003c8	8b c2		 mov	 eax, edx
  003ca	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  003cd	8d 49 00	 npad	 3
$LL52@getDescrip:
  003d0	8a 08		 mov	 cl, BYTE PTR [eax]
  003d2	40		 inc	 eax
  003d3	84 c9		 test	 cl, cl
  003d5	75 f9		 jne	 SHORT $LL52@getDescrip
  003d7	2b c6		 sub	 eax, esi
  003d9	0f 85 f2 00 00
	00		 jne	 $LN1@getDescrip

; 326  :             get_func_name(ea, arrptr[INDEX_CODE_DATA], MAXSTR);

  003df	68 00 04 00 00	 push	 1024			; 00000400H
  003e4	52		 push	 edx
  003e5	53		 push	 ebx
  003e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__get_func_name@12
  003ec	5f		 pop	 edi
  003ed	5e		 pop	 esi
  003ee	5b		 pop	 ebx

; 381  :     }    
; 382  : }

  003ef	8b e5		 mov	 esp, ebp
  003f1	5d		 pop	 ebp
  003f2	c2 0c 00	 ret	 12			; 0000000cH
$LN7@getDescrip:

; 350  :             {
; 351  :                 if ((info[i] == ';') || (info[i] == '/' && info[i+1] == '/' && quotes==0))

  003f5	80 f9 3b	 cmp	 cl, 59			; 0000003bH
  003f8	74 18		 je	 SHORT $LN55@getDescrip
  003fa	3a ca		 cmp	 cl, dl
  003fc	75 0d		 jne	 SHORT $LN9@getDescrip
  003fe	38 94 35 01 fc
	ff ff		 cmp	 BYTE PTR _info$51940[ebp+esi+1], dl
  00405	75 04		 jne	 SHORT $LN9@getDescrip
  00407	85 ff		 test	 edi, edi
  00409	74 07		 je	 SHORT $LN55@getDescrip
$LN9@getDescrip:

; 338  :         //SetComment(ea, arrptr[INDEX_COMMENT]);
; 339  : 
; 340  :         int quotes=0;
; 341  :         //remove comment from our instruction text
; 342  :         for(int i = 0; i< strlen(info); i++)

  0040b	46		 inc	 esi
  0040c	3b f0		 cmp	 esi, eax
  0040e	72 81		 jb	 SHORT $LL10@getDescrip

; 350  :             {
; 351  :                 if ((info[i] == ';') || (info[i] == '/' && info[i+1] == '/' && quotes==0))

  00410	eb 08		 jmp	 SHORT $LN56@getDescrip
$LN55@getDescrip:

; 352  :                 {
; 353  :                     info[i] = 0x0;

  00412	c6 84 35 00 fc
	ff ff 00	 mov	 BYTE PTR _info$51940[ebp+esi], 0
$LN56@getDescrip:

; 354  :                     break;
; 355  :                 }
; 356  :             }
; 357  :             
; 358  :         }
; 359  :                 
; 360  :         // if its data show its name also
; 361  :         // e.g: "dada db 0" will be shown instead of "db 0"
; 362  :         flags_t tflag = getFlags(ea);

  0041a	6a 00		 push	 0
  0041c	53		 push	 ebx
  0041d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__get_flags_ex@8

; 363  :         
; 364  :         if (!isCode(tflag) && has_any_name(tflag))

  00423	8b d0		 mov	 edx, eax
  00425	81 e2 00 06 00
	00		 and	 edx, 1536		; 00000600H
  0042b	81 fa 00 06 00
	00		 cmp	 edx, 1536		; 00000600H
  00431	0f 84 81 00 00
	00		 je	 $LN3@getDescrip
  00437	a9 00 c0 00 00	 test	 eax, 49152		; 0000c000H
  0043c	74 7a		 je	 SHORT $LN3@getDescrip

; 365  :         {
; 366  :             //get name of variable
; 367  :             get_name(BADADDR, ea, name, MAXSTR);

  0043e	68 00 04 00 00	 push	 1024			; 00000400H
  00443	8d 85 00 f8 ff
	ff		 lea	 eax, DWORD PTR _name$51941[ebp]
  00449	50		 push	 eax
  0044a	53		 push	 ebx
  0044b	6a ff		 push	 -1
  0044d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__get_name@16

; 368  :             
; 369  :             //format(arrptr[INDEX_CODE_DATA], name, info);
; 370  :             
; 371  :             if(strlen(name) < VAR_LEN)

  00453	8d 85 00 f8 ff
	ff		 lea	 eax, DWORD PTR _name$51941[ebp]
  00459	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0045c	8d 64 24 00	 npad	 4
$LL54@getDescrip:
  00460	8a 08		 mov	 cl, BYTE PTR [eax]
  00462	40		 inc	 eax
  00463	84 c9		 test	 cl, cl
  00465	75 f9		 jne	 SHORT $LL54@getDescrip
  00467	2b c2		 sub	 eax, edx
  00469	83 f8 40	 cmp	 eax, 64			; 00000040H
  0046c	73 0f		 jae	 SHORT $LN2@getDescrip

; 372  :                 addblanks(name, VAR_LEN);

  0046e	6a 40		 push	 64			; 00000040H
  00470	8d 8d 00 f8 ff
	ff		 lea	 ecx, DWORD PTR _name$51941[ebp]
  00476	51		 push	 ecx
  00477	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__addblanks@8
$LN2@getDescrip:

; 373  : 
; 374  :             qsnprintf(arrptr[INDEX_CODE_DATA], MAXSTR, "%s %s", name, info);

  0047d	8b 75 10	 mov	 esi, DWORD PTR _arrptr$[ebp]
  00480	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00483	8d 95 00 fc ff
	ff		 lea	 edx, DWORD PTR _info$51940[ebp]
  00489	52		 push	 edx
  0048a	8d 85 00 f8 ff
	ff		 lea	 eax, DWORD PTR _name$51941[ebp]
  00490	50		 push	 eax
  00491	68 00 00 00 00	 push	 OFFSET ??_C@_05DNIIFBMG@?$CFs?5?$CFs?$AA@
  00496	68 00 04 00 00	 push	 1024			; 00000400H
  0049b	51		 push	 ecx
  0049c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__qsnprintf

; 375  :             trim(arrptr[INDEX_CODE_DATA]);

  004a2	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  004a5	83 c4 14	 add	 esp, 20			; 00000014H
  004a8	52		 push	 edx
  004a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__trim@4
  004af	5f		 pop	 edi
  004b0	5e		 pop	 esi
  004b1	5b		 pop	 ebx

; 381  :     }    
; 382  : }

  004b2	8b e5		 mov	 esp, ebp
  004b4	5d		 pop	 ebp
  004b5	c2 0c 00	 ret	 12			; 0000000cH
$LN3@getDescrip:

; 376  :             
; 377  :         }
; 378  :         else
; 379  :             // copy instruction
; 380  :             qstrncpy(arrptr[INDEX_CODE_DATA], info, MAXSTR);

  004b8	8b 4d 10	 mov	 ecx, DWORD PTR _arrptr$[ebp]
  004bb	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  004be	68 00 04 00 00	 push	 1024			; 00000400H
  004c3	8d 85 00 fc ff
	ff		 lea	 eax, DWORD PTR _info$51940[ebp]
  004c9	50		 push	 eax
  004ca	52		 push	 edx
  004cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__qstrncpy@12
$LN1@getDescrip:
  004d1	5f		 pop	 edi
  004d2	5e		 pop	 esi
  004d3	5b		 pop	 ebx

; 381  :     }    
; 382  : }

  004d4	8b e5		 mov	 esp, ebp
  004d6	5d		 pop	 ebp
  004d7	c2 0c 00	 ret	 12			; 0000000cH
?getDescription@@YGXPAXIPBQAD@Z ENDP			; getDescription
_TEXT	ENDS
PUBLIC	?SetComment@@YGXIPAD@Z				; SetComment
; Function compile flags: /Ogtp
_TEXT	SEGMENT
?SetComment@@YGXIPAD@Z PROC				; SetComment
; _ea$ = eax
; _ptcomment$ = edi

; 148  : {

  004e0	56		 push	 esi
  004e1	8b f0		 mov	 esi, eax

; 149  :     
; 150  :     switch(GetCommentType(ea))

  004e3	e8 00 00 00 00	 call	 ?GetCommentType@@YGHI@Z	; GetCommentType
  004e8	48		 dec	 eax
  004e9	74 34		 je	 SHORT $LN3@SetComment
  004eb	48		 dec	 eax
  004ec	74 25		 je	 SHORT $LN2@SetComment
  004ee	83 e8 0e	 sub	 eax, 14			; 0000000eH
  004f1	75 36		 jne	 SHORT $LN5@SetComment

; 162  :         break;
; 163  : 
; 164  :     case PROC_COMMENT:
; 165  :         set_func_cmt(getn_func(get_func_num(ea)),ptcomment, true);

  004f3	56		 push	 esi
  004f4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__get_func_num@4
  004fa	50		 push	 eax
  004fb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__getn_func@4
  00501	6a 01		 push	 1
  00503	57		 push	 edi
  00504	50		 push	 eax
  00505	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__funcs
  0050a	50		 push	 eax
  0050b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__areacb_t_set_area_cmt@16
  00511	5e		 pop	 esi

; 166  :         break;
; 167  :     }    
; 168  : }

  00512	c3		 ret	 0
$LN2@SetComment:

; 158  :         break;
; 159  : 
; 160  :     case INST_REP_COMMENT:
; 161  :         set_cmt(ea, ptcomment, true);

  00513	6a 01		 push	 1
  00515	57		 push	 edi
  00516	56		 push	 esi
  00517	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__set_cmt@12
  0051d	5e		 pop	 esi

; 166  :         break;
; 167  :     }    
; 168  : }

  0051e	c3		 ret	 0
$LN3@SetComment:

; 151  :     {
; 152  : 
; 153  :     case NO_COMMENT:
; 154  :         break;
; 155  : 
; 156  :     case INST_NORM_COMMENT:
; 157  :         set_cmt(ea, ptcomment, false);

  0051f	6a 00		 push	 0
  00521	57		 push	 edi
  00522	56		 push	 esi
  00523	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__set_cmt@12
$LN5@SetComment:
  00529	5e		 pop	 esi

; 166  :         break;
; 167  :     }    
; 168  : }

  0052a	c3		 ret	 0
?SetComment@@YGXIPAD@Z ENDP				; SetComment
_TEXT	ENDS
PUBLIC	?GetComment@@YGXIPAD_N@Z			; GetComment
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_rmv_crfl$ = 8						; size = 1
?GetComment@@YGXIPAD_N@Z PROC				; GetComment
; _ea$ = eax
; _ptcomment$ = edi

; 120  : {

  00530	55		 push	 ebp
  00531	8b ec		 mov	 ebp, esp
  00533	56		 push	 esi
  00534	8b f0		 mov	 esi, eax

; 121  :     char* origcmt;
; 122  :     
; 123  :     int cmttype = GetCommentType(ea);

  00536	e8 00 00 00 00	 call	 ?GetCommentType@@YGHI@Z	; GetCommentType

; 124  :     
; 125  :     if (cmttype == NO_COMMENT)

  0053b	85 c0		 test	 eax, eax
  0053d	75 07		 jne	 SHORT $LN6@GetComment@2

; 126  :     { 
; 127  :         ptcomment[0] = '\0';

  0053f	88 07		 mov	 BYTE PTR [edi], al
  00541	5e		 pop	 esi

; 145  : }

  00542	5d		 pop	 ebp
  00543	c2 04 00	 ret	 4
$LN6@GetComment@2:

; 128  :         return;
; 129  :     }
; 130  :     else
; 131  :         if (cmttype == INST_NORM_COMMENT)

  00546	83 f8 01	 cmp	 eax, 1
  00549	75 11		 jne	 SHORT $LN4@GetComment@2

; 132  :             get_cmt(ea, false, ptcomment, MAXSTR);

  0054b	68 00 04 00 00	 push	 1024			; 00000400H
  00550	57		 push	 edi
  00551	6a 00		 push	 0
  00553	56		 push	 esi
  00554	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__get_cmt@16

; 133  :         else

  0055a	eb 49		 jmp	 SHORT $LN1@GetComment@2
$LN4@GetComment@2:

; 134  :             if (cmttype == INST_REP_COMMENT)

  0055c	83 f8 02	 cmp	 eax, 2
  0055f	75 11		 jne	 SHORT $LN2@GetComment@2

; 135  :                 get_cmt(ea, true, ptcomment, MAXSTR);

  00561	68 00 04 00 00	 push	 1024			; 00000400H
  00566	57		 push	 edi
  00567	6a 01		 push	 1
  00569	56		 push	 esi
  0056a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__get_cmt@16

; 136  :         else

  00570	eb 33		 jmp	 SHORT $LN1@GetComment@2
$LN2@GetComment@2:

; 137  :         {
; 138  :             origcmt = get_func_cmt(getn_func(get_func_num(ea)), true);

  00572	56		 push	 esi
  00573	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__get_func_num@4
  00579	50		 push	 eax
  0057a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__getn_func@4
  00580	6a 01		 push	 1
  00582	50		 push	 eax
  00583	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__funcs
  00588	50		 push	 eax
  00589	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__areacb_t_get_area_cmt@12

; 139  :             qstrncpy(ptcomment, origcmt, MAXSTR);

  0058f	68 00 04 00 00	 push	 1024			; 00000400H
  00594	8b f0		 mov	 esi, eax
  00596	56		 push	 esi
  00597	57		 push	 edi
  00598	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__qstrncpy@12

; 140  :             qfree(origcmt);

  0059e	56		 push	 esi
  0059f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__qfree@4
$LN1@GetComment@2:

; 141  :         }
; 142  :     
; 143  :     //remove CR/LF   
; 144  :      rmv_crfl ? strrpl(ptcomment, 0xa, ' ') : 0;

  005a5	80 7d 08 00	 cmp	 BYTE PTR _rmv_crfl$[ebp], 0
  005a9	74 0b		 je	 SHORT $LN9@GetComment@2
  005ab	6a 20		 push	 32			; 00000020H
  005ad	6a 0a		 push	 10			; 0000000aH
  005af	57		 push	 edi
  005b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strrpl@12
$LN9@GetComment@2:
  005b6	5e		 pop	 esi

; 145  : }

  005b7	5d		 pop	 ebp
  005b8	c2 04 00	 ret	 4
?GetComment@@YGXIPAD_N@Z ENDP				; GetComment
; Function compile flags: /Ogtp
_obj$ = 8						; size = 4
$T56185 = 12						; size = 4
_n$ = 12						; size = 4
?btDelete@@YGIPAXI@Z PROC				; btDelete

; 435  : {

  005c0	55		 push	 ebp
  005c1	8b ec		 mov	 ebp, esp
  005c3	53		 push	 ebx

; 436  :     //msg("delete(%u)\n",n);
; 437  : 
; 438  :     if (n==0)

  005c4	8b 5d 0c	 mov	 ebx, DWORD PTR _n$[ebp]
  005c7	85 db		 test	 ebx, ebx
  005c9	75 07		 jne	 SHORT $LN2@btDelete

; 439  :         return n;

  005cb	33 c0		 xor	 eax, eax
  005cd	5b		 pop	 ebx

; 452  : }

  005ce	5d		 pop	 ebp
  005cf	c2 08 00	 ret	 8
$LN2@btDelete:

; 440  :     
; 441  :     netnode *node = (netnode *)obj;
; 442  :     ea_t ea = node->altval(n-1);

  005d2	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  005d5	8b 00		 mov	 eax, DWORD PTR [eax]
  005d7	56		 push	 esi
  005d8	57		 push	 edi
  005d9	6a 41		 push	 65			; 00000041H
  005db	8d 7b ff	 lea	 edi, DWORD PTR [ebx-1]
  005de	57		 push	 edi
  005df	50		 push	 eax
  005e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__netnode_altval@12
  005e6	8b f0		 mov	 esi, eax

; 443  : 
; 444  :     // get comment type
; 445  :     if (ea==BADADDR)

  005e8	83 fe ff	 cmp	 esi, -1
  005eb	75 09		 jne	 SHORT $LN1@btDelete

; 446  :         return n;

  005ed	5f		 pop	 edi
  005ee	5e		 pop	 esi
  005ef	8b c3		 mov	 eax, ebx
  005f1	5b		 pop	 ebx

; 452  : }

  005f2	5d		 pop	 ebp
  005f3	c2 08 00	 ret	 8
$LN1@btDelete:

; 447  : 
; 448  :     SetComment(ea, "");

  005f6	e8 00 00 00 00	 call	 ?GetCommentType@@YGHI@Z	; GetCommentType
  005fb	48		 dec	 eax
  005fc	74 31		 je	 SHORT $LN11@btDelete
  005fe	48		 dec	 eax
  005ff	74 2a		 je	 SHORT $LN10@btDelete
  00601	83 e8 0e	 sub	 eax, 14			; 0000000eH
  00604	75 37		 jne	 SHORT $LN13@btDelete
  00606	56		 push	 esi
  00607	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__get_func_num@4
  0060d	50		 push	 eax
  0060e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__getn_func@4
  00614	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp__funcs
  0061a	6a 01		 push	 1
  0061c	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00621	50		 push	 eax
  00622	51		 push	 ecx
  00623	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__areacb_t_set_area_cmt@16
  00629	eb 12		 jmp	 SHORT $LN13@btDelete
$LN10@btDelete:
  0062b	6a 01		 push	 1
  0062d	eb 02		 jmp	 SHORT $LN31@btDelete
$LN11@btDelete:
  0062f	6a 00		 push	 0
$LN31@btDelete:
  00631	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@?$AA@
  00636	56		 push	 esi
  00637	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__set_cmt@12
$LN13@btDelete:

; 449  :     node->altset(-5, MOD_DELETE);

  0063d	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00640	8b 08		 mov	 ecx, DWORD PTR [eax]
  00642	6a 41		 push	 65			; 00000041H
  00644	6a 04		 push	 4
  00646	8d 55 0c	 lea	 edx, DWORD PTR $T56185[ebp]
  00649	52		 push	 edx
  0064a	6a fb		 push	 -5			; fffffffbH
  0064c	51		 push	 ecx
  0064d	c7 45 0c 01 00
	00 00		 mov	 DWORD PTR $T56185[ebp], 1
  00654	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__netnode_supset@20

; 450  :     refresh_idaview_anyway();

  0065a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp__callui
  00660	8b 02		 mov	 eax, DWORD PTR [edx]
  00662	6a 0e		 push	 14			; 0000000eH
  00664	ff d0		 call	 eax
  00666	83 c4 04	 add	 esp, 4

; 451  :     return n-1;

  00669	8b c7		 mov	 eax, edi
  0066b	5f		 pop	 edi
  0066c	5e		 pop	 esi
  0066d	5b		 pop	 ebx

; 452  : }

  0066e	5d		 pop	 ebp
  0066f	c2 08 00	 ret	 8
?btDelete@@YGIPAXI@Z ENDP				; btDelete
; Function compile flags: /Ogtp
_newcmt$ = -2048					; size = 1024
_oldcmt$ = -1024					; size = 1024
_obj$ = 8						; size = 4
$T56266 = 12						; size = 4
$T56249 = 12						; size = 4
_n$ = 12						; size = 4
?btEdit@@YGXPAXI@Z PROC					; btEdit

; 403  : {

  00680	55		 push	 ebp
  00681	8b ec		 mov	 ebp, esp

; 404  :     //msg("edit(%u)\n",n);
; 405  :     char oldcmt[MAXSTR];
; 406  :     char newcmt[MAXSTR];
; 407  :     
; 408  :     netnode *node = (netnode *)obj;   
; 409  : 
; 410  :     if (n==0)

  00683	8b 4d 0c	 mov	 ecx, DWORD PTR _n$[ebp]
  00686	81 ec 00 08 00
	00		 sub	 esp, 2048		; 00000800H
  0068c	85 c9		 test	 ecx, ecx
  0068e	0f 84 23 01 00
	00		 je	 $LN38@btEdit

; 411  :         return;
; 412  :     
; 413  :     ea_t ea = node->altval(n-1);

  00694	53		 push	 ebx
  00695	8b 5d 08	 mov	 ebx, DWORD PTR _obj$[ebp]
  00698	8b 03		 mov	 eax, DWORD PTR [ebx]
  0069a	56		 push	 esi
  0069b	6a 41		 push	 65			; 00000041H
  0069d	49		 dec	 ecx
  0069e	51		 push	 ecx
  0069f	50		 push	 eax
  006a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__netnode_altval@12
  006a6	8b f0		 mov	 esi, eax

; 414  :     if (ea==BADADDR)

  006a8	83 fe ff	 cmp	 esi, -1
  006ab	0f 84 04 01 00
	00		 je	 $LN41@btEdit

; 415  :         return;
; 416  :     
; 417  :     GetComment(ea, oldcmt, false);

  006b1	57		 push	 edi
  006b2	e8 00 00 00 00	 call	 ?GetCommentType@@YGHI@Z	; GetCommentType
  006b7	85 c0		 test	 eax, eax
  006b9	75 08		 jne	 SHORT $LN17@btEdit
  006bb	88 85 00 fc ff
	ff		 mov	 BYTE PTR _oldcmt$[ebp], al
  006c1	eb 72		 jmp	 SHORT $LN12@btEdit
$LN17@btEdit:
  006c3	83 f8 01	 cmp	 eax, 1
  006c6	75 17		 jne	 SHORT $LN15@btEdit
  006c8	68 00 04 00 00	 push	 1024			; 00000400H
  006cd	8d 85 00 fc ff
	ff		 lea	 eax, DWORD PTR _oldcmt$[ebp]
  006d3	50		 push	 eax
  006d4	6a 00		 push	 0
  006d6	56		 push	 esi
  006d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__get_cmt@16
  006dd	eb 56		 jmp	 SHORT $LN12@btEdit
$LN15@btEdit:
  006df	83 f8 02	 cmp	 eax, 2
  006e2	75 17		 jne	 SHORT $LN13@btEdit
  006e4	68 00 04 00 00	 push	 1024			; 00000400H
  006e9	8d 8d 00 fc ff
	ff		 lea	 ecx, DWORD PTR _oldcmt$[ebp]
  006ef	51		 push	 ecx
  006f0	6a 01		 push	 1
  006f2	56		 push	 esi
  006f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__get_cmt@16
  006f9	eb 3a		 jmp	 SHORT $LN12@btEdit
$LN13@btEdit:
  006fb	56		 push	 esi
  006fc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__get_func_num@4
  00702	50		 push	 eax
  00703	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__getn_func@4
  00709	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp__funcs
  0070f	6a 01		 push	 1
  00711	50		 push	 eax
  00712	52		 push	 edx
  00713	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__areacb_t_get_area_cmt@12
  00719	8b f8		 mov	 edi, eax
  0071b	68 00 04 00 00	 push	 1024			; 00000400H
  00720	57		 push	 edi
  00721	8d 85 00 fc ff
	ff		 lea	 eax, DWORD PTR _oldcmt$[ebp]
  00727	50		 push	 eax
  00728	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__qstrncpy@12
  0072e	57		 push	 edi
  0072f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__qfree@4
$LN12@btEdit:

; 418  : 
; 419  :     if (asktext(MAXSTR, newcmt, oldcmt, "Please enter comment:"))

  00735	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@LADDGNMI@Please?5enter?5comment?3?$AA@
  0073a	8d 8d 00 f8 ff
	ff		 lea	 ecx, DWORD PTR _newcmt$[ebp]
  00740	51		 push	 ecx
  00741	68 00 04 00 00	 push	 1024			; 00000400H
  00746	8d 95 00 fc ff
	ff		 lea	 edx, DWORD PTR _oldcmt$[ebp]
  0074c	e8 00 00 00 00	 call	 ?asktext@@YAPADIPADPBD1ZZ ; asktext
  00751	83 c4 0c	 add	 esp, 12			; 0000000cH
  00754	85 c0		 test	 eax, eax
  00756	74 0d		 je	 SHORT $LN3@btEdit

; 420  :         SetComment(ea, newcmt);

  00758	8d bd 00 f8 ff
	ff		 lea	 edi, DWORD PTR _newcmt$[ebp]
  0075e	8b c6		 mov	 eax, esi
  00760	e8 00 00 00 00	 call	 ?SetComment@@YGXIPAD@Z	; SetComment
$LN3@btEdit:

; 421  : 
; 422  :     if (strlen(newcmt) == 0)

  00765	8d 85 00 f8 ff
	ff		 lea	 eax, DWORD PTR _newcmt$[ebp]
  0076b	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0076e	5f		 pop	 edi
  0076f	90		 npad	 1
$LL40@btEdit:
  00770	8a 08		 mov	 cl, BYTE PTR [eax]
  00772	40		 inc	 eax
  00773	84 c9		 test	 cl, cl
  00775	75 f9		 jne	 SHORT $LL40@btEdit
  00777	2b c2		 sub	 eax, edx

; 423  :         //no comment anymore
; 424  :         node->altset(-5, MOD_DELETE);

  00779	6a 41		 push	 65			; 00000041H
  0077b	6a 04		 push	 4
  0077d	75 12		 jne	 SHORT $LN2@btEdit
  0077f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00781	8d 55 0c	 lea	 edx, DWORD PTR $T56249[ebp]
  00784	52		 push	 edx
  00785	6a fb		 push	 -5			; fffffffbH
  00787	c7 45 0c 01 00
	00 00		 mov	 DWORD PTR $T56249[ebp], 1
  0078e	50		 push	 eax

; 425  :     else

  0078f	eb 10		 jmp	 SHORT $LN43@btEdit
$LN2@btEdit:

; 426  :         node->altset(-5, MOD_EDIT);

  00791	8b 13		 mov	 edx, DWORD PTR [ebx]
  00793	8d 4d 0c	 lea	 ecx, DWORD PTR $T56266[ebp]
  00796	51		 push	 ecx
  00797	6a fb		 push	 -5			; fffffffbH
  00799	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR $T56266[ebp], 0
  007a0	52		 push	 edx
$LN43@btEdit:
  007a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__netnode_supset@20

; 427  :     refresh_idaview_anyway();

  007a7	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__callui
  007ac	8b 08		 mov	 ecx, DWORD PTR [eax]
  007ae	6a 0e		 push	 14			; 0000000eH
  007b0	ff d1		 call	 ecx
  007b2	83 c4 04	 add	 esp, 4
$LN41@btEdit:
  007b5	5e		 pop	 esi
  007b6	5b		 pop	 ebx
$LN38@btEdit:

; 428  : }

  007b7	8b e5		 mov	 esp, ebp
  007b9	5d		 pop	 ebp
  007ba	c2 08 00	 ret	 8
?btEdit@@YGXPAXI@Z ENDP					; btEdit
_TEXT	ENDS
PUBLIC	?GetCommentAddress@@YGXPAX_N@Z			; GetCommentAddress
; Function compile flags: /Ogtp
_TEXT	SEGMENT
_cmt$ = -1048						; size = 1024
_oldstate$ = -24					; size = 4
_end_ea$ = -20						; size = 4
_options$ = -16						; size = 2
_counter$ = -12						; size = 4
$T56388 = -8						; size = 4
_cmttype$ = -8						; size = 4
_show_proc$51901 = -4					; size = 1
_show_code$51898 = -3					; size = 1
_show_unkn$51900 = -2					; size = 1
_show_data$51899 = -1					; size = 1
$T56444 = 8						; size = 4
_obj$ = 8						; size = 4
_show_wait$ = 12					; size = 1
?GetCommentAddress@@YGXPAX_N@Z PROC			; GetCommentAddress

; 191  : {

  007c0	55		 push	 ebp
  007c1	8b ec		 mov	 ebp, esp
  007c3	81 ec 18 04 00
	00		 sub	 esp, 1048		; 00000418H

; 192  :     char cmt[MAXSTR];
; 193  :     long cmttype;
; 194  :     int counter = 0;	
; 195  :     ea_t curr;
; 196  :     idastate_t oldstate;
; 197  : 
; 198  :     netnode *node = (netnode *)obj;
; 199  :     
; 200  :     if (show_wait)

  007c9	80 7d 0c 00	 cmp	 BYTE PTR _show_wait$[ebp], 0
  007cd	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _counter$[ebp], 0
  007d4	74 1f		 je	 SHORT $LN99@GetComment@3

; 201  : 	{
; 202  : 		oldstate = setStat(st_Work);

  007d6	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__auto_display
  007db	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 203  : 		show_wait_box("Scanning database for comments...");

  007de	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@FEMLKJGK@Scanning?5database?5for?5comments?4?4@
  007e3	c7 40 08 03 00
	00 00		 mov	 DWORD PTR [eax+8], 3
  007ea	89 4d e8	 mov	 DWORD PTR _oldstate$[ebp], ecx
  007ed	e8 00 00 00 00	 call	 ?show_wait_box@@YAXPBDZZ ; show_wait_box
  007f2	83 c4 04	 add	 esp, 4
$LN99@GetComment@3:

; 204  : 		
; 205  : 	}
; 206  :     
; 207  :     // start and end address of area to scan for comments
; 208  :     ea_t start_ea = node->altval(-2);

  007f5	53		 push	 ebx
  007f6	8b 5d 08	 mov	 ebx, DWORD PTR _obj$[ebp]
  007f9	8b 03		 mov	 eax, DWORD PTR [ebx]
  007fb	56		 push	 esi
  007fc	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__netnode_altval@12
  00802	57		 push	 edi
  00803	6a 41		 push	 65			; 00000041H
  00805	6a fe		 push	 -2			; fffffffeH
  00807	50		 push	 eax
  00808	ff d6		 call	 esi

; 209  :     ea_t end_ea   = node->altval(-3);

  0080a	6a 41		 push	 65			; 00000041H

; 210  : 
; 211  :     //get options
; 212  :     short options = node->altval(-4);
; 213  :     
; 214  :     
; 215  :     curr = nextthat(start_ea-1,end_ea, IsComment, NULL);

  0080c	8d 78 ff	 lea	 edi, DWORD PTR [eax-1]
  0080f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00811	6a fd		 push	 -3			; fffffffdH
  00813	50		 push	 eax
  00814	ff d6		 call	 esi
  00816	6a 41		 push	 65			; 00000041H
  00818	89 45 ec	 mov	 DWORD PTR _end_ea$[ebp], eax
  0081b	8b 03		 mov	 eax, DWORD PTR [ebx]
  0081d	6a fc		 push	 -4			; fffffffcH
  0081f	50		 push	 eax
  00820	ff d6		 call	 esi
  00822	8b 4d ec	 mov	 ecx, DWORD PTR _end_ea$[ebp]
  00825	6a 00		 push	 0
  00827	68 00 00 00 00	 push	 OFFSET ?IsComment@@YG_NIPAX@Z ; IsComment
  0082c	0f b7 c0	 movzx	 eax, ax
  0082f	51		 push	 ecx
  00830	57		 push	 edi
  00831	89 45 f0	 mov	 DWORD PTR _options$[ebp], eax
  00834	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__nextthat@16
  0083a	8b f0		 mov	 esi, eax

; 216  :     while (curr != BADADDR)

  0083c	83 fe ff	 cmp	 esi, -1
  0083f	0f 84 45 02 00
	00		 je	 $LN7@GetComment@3
$LL8@GetComment@3:

; 217  :     {	
; 218  :         cmttype = GetCommentType(curr);

  00845	6a 00		 push	 0
  00847	56		 push	 esi
  00848	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__get_flags_ex@8
  0084e	56		 push	 esi
  0084f	8b f8		 mov	 edi, eax
  00851	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__get_func_num@4
  00857	50		 push	 eax
  00858	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__getn_func@4
  0085e	85 c0		 test	 eax, eax
  00860	74 21		 je	 SHORT $LN38@GetComment@3
  00862	39 30		 cmp	 DWORD PTR [eax], esi
  00864	75 1d		 jne	 SHORT $LN38@GetComment@3
  00866	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp__funcs
  0086c	6a 01		 push	 1
  0086e	50		 push	 eax
  0086f	52		 push	 edx
  00870	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__areacb_t_get_area_cmt@12
  00876	85 c0		 test	 eax, eax
  00878	74 09		 je	 SHORT $LN38@GetComment@3
  0087a	c7 45 f8 10 00
	00 00		 mov	 DWORD PTR _cmttype$[ebp], 16 ; 00000010H
  00881	eb 4f		 jmp	 SHORT $LN39@GetComment@3
$LN38@GetComment@3:
  00883	8b df		 mov	 ebx, edi
  00885	c1 eb 0b	 shr	 ebx, 11			; 0000000bH
  00888	80 e3 01	 and	 bl, 1
  0088b	74 1e		 je	 SHORT $LN100@GetComment@3
  0088d	68 00 04 00 00	 push	 1024			; 00000400H
  00892	6a 00		 push	 0
  00894	6a 00		 push	 0
  00896	56		 push	 esi
  00897	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__get_cmt@16
  0089d	83 f8 ff	 cmp	 eax, -1
  008a0	74 09		 je	 SHORT $LN100@GetComment@3
  008a2	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _cmttype$[ebp], 1
  008a9	eb 27		 jmp	 SHORT $LN39@GetComment@3
$LN100@GetComment@3:
  008ab	84 db		 test	 bl, bl
  008ad	74 1c		 je	 SHORT $LN104@GetComment@3
  008af	68 00 04 00 00	 push	 1024			; 00000400H
  008b4	6a 00		 push	 0
  008b6	6a 01		 push	 1
  008b8	56		 push	 esi
  008b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__get_cmt@16
  008bf	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _cmttype$[ebp], 2
  008c6	83 f8 ff	 cmp	 eax, -1
  008c9	75 07		 jne	 SHORT $LN39@GetComment@3
$LN104@GetComment@3:
  008cb	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _cmttype$[ebp], 0
$LN39@GetComment@3:

; 219  :         
; 220  :         flags_t fl = getFlags(curr);

  008d2	6a 00		 push	 0
  008d4	56		 push	 esi
  008d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__get_flags_ex@8

; 221  : 
; 222  :         bool show_code = (isCode(fl) && (options & SHOW_CODE_COMMENT));

  008db	8a 5d f0	 mov	 bl, BYTE PTR _options$[ebp]
  008de	25 00 06 00 00	 and	 eax, 1536		; 00000600H
  008e3	3d 00 06 00 00	 cmp	 eax, 1536		; 00000600H
  008e8	75 09		 jne	 SHORT $LN12@GetComment@3
  008ea	c6 45 fd 01	 mov	 BYTE PTR _show_code$51898[ebp], 1
  008ee	f6 c3 04	 test	 bl, 4
  008f1	75 04		 jne	 SHORT $LN13@GetComment@3
$LN12@GetComment@3:
  008f3	c6 45 fd 00	 mov	 BYTE PTR _show_code$51898[ebp], 0
$LN13@GetComment@3:

; 223  :         bool show_data = (isData(fl) && (options & SHOW_DATA_COMMENT));

  008f7	3d 00 04 00 00	 cmp	 eax, 1024		; 00000400H
  008fc	75 09		 jne	 SHORT $LN14@GetComment@3
  008fe	c6 45 ff 01	 mov	 BYTE PTR _show_data$51899[ebp], 1
  00902	f6 c3 08	 test	 bl, 8
  00905	75 04		 jne	 SHORT $LN15@GetComment@3
$LN14@GetComment@3:
  00907	c6 45 ff 00	 mov	 BYTE PTR _show_data$51899[ebp], 0
$LN15@GetComment@3:

; 224  :         bool show_unkn = (isUnknown(fl) && (options & SHOW_UNKN_COMMENT));

  0090b	85 c0		 test	 eax, eax
  0090d	75 09		 jne	 SHORT $LN16@GetComment@3
  0090f	c6 45 fe 01	 mov	 BYTE PTR _show_unkn$51900[ebp], 1
  00913	f6 c3 20	 test	 bl, 32			; 00000020H
  00916	75 04		 jne	 SHORT $LN17@GetComment@3
$LN16@GetComment@3:
  00918	c6 45 fe 00	 mov	 BYTE PTR _show_unkn$51900[ebp], 0
$LN17@GetComment@3:

; 225  :         bool show_proc = (cmttype == PROC_COMMENT) && (options & INST_REP_COMMENT);

  0091c	83 7d f8 10	 cmp	 DWORD PTR _cmttype$[ebp], 16 ; 00000010H
  00920	75 09		 jne	 SHORT $LN18@GetComment@3
  00922	c6 45 fc 01	 mov	 BYTE PTR _show_proc$51901[ebp], 1
  00926	f6 c3 02	 test	 bl, 2
  00929	75 04		 jne	 SHORT $LN19@GetComment@3
$LN18@GetComment@3:
  0092b	c6 45 fc 00	 mov	 BYTE PTR _show_proc$51901[ebp], 0
$LN19@GetComment@3:

; 226  :         bool show_dflt = is_tilcmt(curr) && (options & SHOW_DFLT_COMMENT);

  0092f	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__get_aflags@4
  00935	56		 push	 esi
  00936	ff d7		 call	 edi
  00938	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  0093b	a8 01		 test	 al, 1
  0093d	74 09		 je	 SHORT $LN20@GetComment@3
  0093f	f6 c3 40	 test	 bl, 64			; 00000040H
  00942	74 04		 je	 SHORT $LN20@GetComment@3
  00944	b3 01		 mov	 bl, 1
  00946	eb 02		 jmp	 SHORT $LN21@GetComment@3
$LN20@GetComment@3:
  00948	32 db		 xor	 bl, bl
$LN21@GetComment@3:

; 227  :         
; 228  :         if (cmttype != NO_COMMENT &&       // if there is a comment
; 229  :             ((cmttype & options)!= 0) &&   // and comment type is valid 
; 230  :             (show_code || show_data || show_unkn)) //and we should show it

  0094a	8b 45 f8	 mov	 eax, DWORD PTR _cmttype$[ebp]
  0094d	85 c0		 test	 eax, eax
  0094f	0f 84 15 01 00
	00		 je	 $LN103@GetComment@3
  00955	0f bf 4d f0	 movsx	 ecx, WORD PTR _options$[ebp]
  00959	85 c8		 test	 ecx, eax
  0095b	0f 84 09 01 00
	00		 je	 $LN103@GetComment@3
  00961	80 7d fd 00	 cmp	 BYTE PTR _show_code$51898[ebp], 0
  00965	75 10		 jne	 SHORT $LN5@GetComment@3
  00967	80 7d ff 00	 cmp	 BYTE PTR _show_data$51899[ebp], 0
  0096b	75 0a		 jne	 SHORT $LN5@GetComment@3
  0096d	80 7d fe 00	 cmp	 BYTE PTR _show_unkn$51900[ebp], 0
  00971	0f 84 f3 00 00
	00		 je	 $LN103@GetComment@3
$LN5@GetComment@3:

; 231  :         {
; 232  :             //don't show comments if INST_REP_COMMENT not enable
; 233  :             if (!(cmttype == PROC_COMMENT && show_proc ==false) && 
; 234  :                 !(is_tilcmt(curr) && show_dflt == false))    

  00977	83 f8 10	 cmp	 eax, 16			; 00000010H
  0097a	75 0a		 jne	 SHORT $LN3@GetComment@3
  0097c	80 7d fc 00	 cmp	 BYTE PTR _show_proc$51901[ebp], 0
  00980	0f 84 e4 00 00
	00		 je	 $LN103@GetComment@3
$LN3@GetComment@3:
  00986	56		 push	 esi
  00987	ff d7		 call	 edi
  00989	c1 e8 0f	 shr	 eax, 15			; 0000000fH
  0098c	a8 01		 test	 al, 1
  0098e	74 08		 je	 SHORT $LN2@GetComment@3
  00990	84 db		 test	 bl, bl
  00992	0f 84 d2 00 00
	00		 je	 $LN103@GetComment@3
$LN2@GetComment@3:

; 235  :             {
; 236  :                 //set address 
; 237  :                 node->altset(counter, curr);

  00998	8b 45 f4	 mov	 eax, DWORD PTR _counter$[ebp]
  0099b	8b 4d 08	 mov	 ecx, DWORD PTR _obj$[ebp]
  0099e	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__netnode_supset@20
  009a4	6a 41		 push	 65			; 00000041H
  009a6	6a 04		 push	 4
  009a8	8d 55 f8	 lea	 edx, DWORD PTR $T56388[ebp]
  009ab	52		 push	 edx
  009ac	8b 11		 mov	 edx, DWORD PTR [ecx]
  009ae	50		 push	 eax
  009af	52		 push	 edx
  009b0	89 75 f8	 mov	 DWORD PTR $T56388[ebp], esi
  009b3	ff d3		 call	 ebx

; 238  :             
; 239  :                 //set comment
; 240  :                 GetComment(curr, (char*) cmt, true);

  009b5	e8 00 00 00 00	 call	 ?GetCommentType@@YGHI@Z	; GetCommentType
  009ba	85 c0		 test	 eax, eax
  009bc	75 0b		 jne	 SHORT $LN74@GetComment@3
  009be	88 85 e8 fb ff
	ff		 mov	 BYTE PTR _cmt$[ebp], al
  009c4	e9 83 00 00 00	 jmp	 $LN77@GetComment@3
$LN74@GetComment@3:
  009c9	83 f8 01	 cmp	 eax, 1
  009cc	75 17		 jne	 SHORT $LN72@GetComment@3
  009ce	68 00 04 00 00	 push	 1024			; 00000400H
  009d3	8d 85 e8 fb ff
	ff		 lea	 eax, DWORD PTR _cmt$[ebp]
  009d9	50		 push	 eax
  009da	6a 00		 push	 0
  009dc	56		 push	 esi
  009dd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__get_cmt@16
  009e3	eb 56		 jmp	 SHORT $LN69@GetComment@3
$LN72@GetComment@3:
  009e5	83 f8 02	 cmp	 eax, 2
  009e8	75 17		 jne	 SHORT $LN70@GetComment@3
  009ea	68 00 04 00 00	 push	 1024			; 00000400H
  009ef	8d 8d e8 fb ff
	ff		 lea	 ecx, DWORD PTR _cmt$[ebp]
  009f5	51		 push	 ecx
  009f6	6a 01		 push	 1
  009f8	56		 push	 esi
  009f9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__get_cmt@16
  009ff	eb 3a		 jmp	 SHORT $LN69@GetComment@3
$LN70@GetComment@3:
  00a01	56		 push	 esi
  00a02	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__get_func_num@4
  00a08	50		 push	 eax
  00a09	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__getn_func@4
  00a0f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp__funcs
  00a15	6a 01		 push	 1
  00a17	50		 push	 eax
  00a18	52		 push	 edx
  00a19	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__areacb_t_get_area_cmt@12
  00a1f	8b f8		 mov	 edi, eax
  00a21	68 00 04 00 00	 push	 1024			; 00000400H
  00a26	57		 push	 edi
  00a27	8d 85 e8 fb ff
	ff		 lea	 eax, DWORD PTR _cmt$[ebp]
  00a2d	50		 push	 eax
  00a2e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__qstrncpy@12
  00a34	57		 push	 edi
  00a35	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__qfree@4
$LN69@GetComment@3:
  00a3b	6a 20		 push	 32			; 00000020H
  00a3d	6a 0a		 push	 10			; 0000000aH
  00a3f	8d 8d e8 fb ff
	ff		 lea	 ecx, DWORD PTR _cmt$[ebp]
  00a45	51		 push	 ecx
  00a46	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strrpl@12
$LN77@GetComment@3:

; 241  :                 node->supset(counter++, &cmt, sizeof(cmt));

  00a4c	8b 45 08	 mov	 eax, DWORD PTR _obj$[ebp]
  00a4f	8b 7d f4	 mov	 edi, DWORD PTR _counter$[ebp]
  00a52	8b 08		 mov	 ecx, DWORD PTR [eax]
  00a54	6a 53		 push	 83			; 00000053H
  00a56	68 00 04 00 00	 push	 1024			; 00000400H
  00a5b	8d 95 e8 fb ff
	ff		 lea	 edx, DWORD PTR _cmt$[ebp]
  00a61	52		 push	 edx
  00a62	57		 push	 edi
  00a63	51		 push	 ecx
  00a64	ff d3		 call	 ebx
  00a66	47		 inc	 edi
  00a67	89 7d f4	 mov	 DWORD PTR _counter$[ebp], edi
$LN103@GetComment@3:

; 242  :             }
; 243  :         }
; 244  :         
; 245  :         curr = nextthat(curr, end_ea, IsComment, NULL);			

  00a6a	8b 55 ec	 mov	 edx, DWORD PTR _end_ea$[ebp]
  00a6d	6a 00		 push	 0
  00a6f	68 00 00 00 00	 push	 OFFSET ?IsComment@@YG_NIPAX@Z ; IsComment
  00a74	52		 push	 edx
  00a75	56		 push	 esi
  00a76	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__nextthat@16
  00a7c	8b f0		 mov	 esi, eax
  00a7e	83 fe ff	 cmp	 esi, -1
  00a81	0f 85 be fd ff
	ff		 jne	 $LL8@GetComment@3

; 216  :     while (curr != BADADDR)

  00a87	8b 5d 08	 mov	 ebx, DWORD PTR _obj$[ebp]
$LN7@GetComment@3:

; 246  :     }
; 247  : 
; 248  :     //number of comments
; 249  :     node->altset(-1, counter);

  00a8a	8b 13		 mov	 edx, DWORD PTR [ebx]
  00a8c	8b 45 f4	 mov	 eax, DWORD PTR _counter$[ebp]
  00a8f	6a 41		 push	 65			; 00000041H
  00a91	6a 04		 push	 4
  00a93	8d 4d 08	 lea	 ecx, DWORD PTR $T56444[ebp]
  00a96	51		 push	 ecx
  00a97	6a ff		 push	 -1
  00a99	52		 push	 edx
  00a9a	89 45 08	 mov	 DWORD PTR $T56444[ebp], eax
  00a9d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__netnode_supset@20

; 250  :    
; 251  :     if (show_wait)

  00aa3	80 7d 0c 00	 cmp	 BYTE PTR _show_wait$[ebp], 0
  00aa7	5f		 pop	 edi
  00aa8	5e		 pop	 esi
  00aa9	5b		 pop	 ebx
  00aaa	74 1e		 je	 SHORT $LN95@GetComment@3

; 252  : 	{
; 253  : 		setStat(oldstate);

  00aac	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__auto_display
  00ab1	8b 4d e8	 mov	 ecx, DWORD PTR _oldstate$[ebp]
  00ab4	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 254  : 		hide_wait_box();

  00ab7	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp__callui
  00abc	8b 10		 mov	 edx, DWORD PTR [eax]
  00abe	50		 push	 eax
  00abf	6a 00		 push	 0
  00ac1	6a 0a		 push	 10			; 0000000aH
  00ac3	6a 15		 push	 21			; 00000015H
  00ac5	ff d2		 call	 edx
  00ac7	83 c4 10	 add	 esp, 16			; 00000010H
$LN95@GetComment@3:

; 255  : 	}
; 256  :     
; 257  : }

  00aca	8b e5		 mov	 esp, ebp
  00acc	5d		 pop	 ebp
  00acd	c2 08 00	 ret	 8
?GetCommentAddress@@YGXPAX_N@Z ENDP			; GetCommentAddress
; Function compile flags: /Ogtp
_cmt$52022 = -1028					; size = 1024
_cmtcount$52024 = -4					; size = 4
$T56541 = 8						; size = 4
$T56558 = 8						; size = 4
_ea$ = 8						; size = 4
_obj$ = 8						; size = 4
tv227 = 12						; size = 4
$T56593 = 12						; size = 4
$T56506 = 12						; size = 4
_n$ = 12						; size = 4
?getUpdate@@YGIPAXI@Z PROC				; getUpdate

; 511  : {

  00ad0	55		 push	 ebp
  00ad1	8b ec		 mov	 ebp, esp
  00ad3	81 ec 04 04 00
	00		 sub	 esp, 1028		; 00000404H
  00ad9	53		 push	 ebx

; 512  :     //msg("update(%u)\n", n);
; 513  :     netnode *node = (netnode *)obj;
; 514  : 
; 515  :     if (n==0)

  00ada	8b 5d 0c	 mov	 ebx, DWORD PTR _n$[ebp]
  00add	85 db		 test	 ebx, ebx
  00adf	75 09		 jne	 SHORT $LN10@getUpdate

; 516  :         return n;

  00ae1	33 c0		 xor	 eax, eax
  00ae3	5b		 pop	 ebx

; 571  : }

  00ae4	8b e5		 mov	 esp, ebp
  00ae6	5d		 pop	 ebp
  00ae7	c2 08 00	 ret	 8
$LN10@getUpdate:
  00aea	56		 push	 esi

; 517  : 
; 518  :     ea_t ea = node->altval(n-1);

  00aeb	8b 75 08	 mov	 esi, DWORD PTR _obj$[ebp]
  00aee	8b 06		 mov	 eax, DWORD PTR [esi]
  00af0	57		 push	 edi
  00af1	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__netnode_altval@12
  00af7	8d 4b ff	 lea	 ecx, DWORD PTR [ebx-1]
  00afa	6a 41		 push	 65			; 00000041H
  00afc	51		 push	 ecx
  00afd	50		 push	 eax
  00afe	89 4d 0c	 mov	 DWORD PTR tv227[ebp], ecx
  00b01	ff d7		 call	 edi
  00b03	89 45 08	 mov	 DWORD PTR _ea$[ebp], eax

; 519  :     
; 520  :     // get comment type
; 521  :     if (ea==BADADDR)

  00b06	83 f8 ff	 cmp	 eax, -1

; 522  :         return n;

  00b09	0f 84 17 01 00
	00		 je	 $LN7@getUpdate

; 523  :     
; 524  :     short last_action = node->altval(-5);

  00b0f	8b 06		 mov	 eax, DWORD PTR [esi]
  00b11	6a 41		 push	 65			; 00000041H
  00b13	6a fb		 push	 -5			; fffffffbH
  00b15	50		 push	 eax
  00b16	ff d7		 call	 edi
  00b18	98		 cwde

; 525  : 
; 526  :     switch(last_action){

  00b19	83 f8 03	 cmp	 eax, 3
  00b1c	0f 87 fc 00 00
	00		 ja	 $LN1@getUpdate
  00b22	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN67@getUpdate[eax*4]
$LN5@getUpdate:

; 527  :     case MOD_UPDATE:
; 528  :         //msg("MOD_UPDATE(%u)\n", n);
; 529  :         GetCommentAddress(node, false);
; 530  :         break;
; 531  :     case MOD_EDIT:        
; 532  :         {
; 533  :             //msg("MOD_EDIT(%u)\n", n);
; 534  :             //we just set new comment in our list
; 535  :             char cmt[MAXSTR];
; 536  :             GetComment(ea, cmt, true);

  00b29	8b 45 08	 mov	 eax, DWORD PTR _ea$[ebp]
  00b2c	6a 01		 push	 1
  00b2e	8d bd fc fb ff
	ff		 lea	 edi, DWORD PTR _cmt$52022[ebp]
  00b34	e8 00 00 00 00	 call	 ?GetComment@@YGXIPAD_N@Z ; GetComment

; 537  :             node->supset(n-1, &cmt, sizeof(cmt));

  00b39	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00b3b	6a 53		 push	 83			; 00000053H
  00b3d	68 00 04 00 00	 push	 1024			; 00000400H
  00b42	8b c7		 mov	 eax, edi
  00b44	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__netnode_supset@20
  00b4a	50		 push	 eax
  00b4b	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  00b4e	50		 push	 eax
  00b4f	51		 push	 ecx
  00b50	ff d7		 call	 edi

; 538  :             node->altset(-5, MOD_FAST_UPDATE);

  00b52	8b 06		 mov	 eax, DWORD PTR [esi]
  00b54	6a 41		 push	 65			; 00000041H
  00b56	6a 04		 push	 4
  00b58	8d 55 0c	 lea	 edx, DWORD PTR $T56506[ebp]
  00b5b	52		 push	 edx
  00b5c	6a fb		 push	 -5			; fffffffbH
  00b5e	50		 push	 eax
  00b5f	c7 45 0c 03 00
	00 00		 mov	 DWORD PTR $T56506[ebp], 3
  00b66	ff d7		 call	 edi
  00b68	5f		 pop	 edi
  00b69	5e		 pop	 esi

; 566  :         break;
; 567  : 
; 568  :     }
; 569  : 
; 570  :    return n;

  00b6a	8b c3		 mov	 eax, ebx
  00b6c	5b		 pop	 ebx

; 571  : }

  00b6d	8b e5		 mov	 esp, ebp
  00b6f	5d		 pop	 ebp
  00b70	c2 08 00	 ret	 8
$LN4@getUpdate:

; 539  :             return n;
; 540  :         }
; 541  :         break;
; 542  :     case MOD_DELETE:
; 543  :         {
; 544  :             //msg("MOD_DELETE(%u)\n", n);
; 545  :             int cmtcount = node->altval(-1);

  00b73	8b 06		 mov	 eax, DWORD PTR [esi]
  00b75	6a 41		 push	 65			; 00000041H
  00b77	6a ff		 push	 -1
  00b79	50		 push	 eax
  00b7a	ff d7		 call	 edi

; 546  :             node->altset(-1, node->altval(-1)-1);       //decrease cmt count

  00b7c	6a 41		 push	 65			; 00000041H
  00b7e	89 45 fc	 mov	 DWORD PTR _cmtcount$52024[ebp], eax
  00b81	8b 06		 mov	 eax, DWORD PTR [esi]
  00b83	6a ff		 push	 -1
  00b85	50		 push	 eax
  00b86	ff d7		 call	 edi
  00b88	8b 16		 mov	 edx, DWORD PTR [esi]
  00b8a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__netnode_supset@20
  00b90	6a 41		 push	 65			; 00000041H
  00b92	6a 04		 push	 4
  00b94	8d 4d 08	 lea	 ecx, DWORD PTR $T56541[ebp]
  00b97	51		 push	 ecx
  00b98	6a ff		 push	 -1
  00b9a	48		 dec	 eax
  00b9b	52		 push	 edx
  00b9c	89 45 08	 mov	 DWORD PTR $T56541[ebp], eax
  00b9f	ff d7		 call	 edi

; 547  :             node->altset(-5, MOD_UPDATE);    

  00ba1	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00ba3	6a 41		 push	 65			; 00000041H
  00ba5	6a 04		 push	 4
  00ba7	8d 45 08	 lea	 eax, DWORD PTR $T56558[ebp]
  00baa	50		 push	 eax
  00bab	6a fb		 push	 -5			; fffffffbH
  00bad	51		 push	 ecx
  00bae	c7 45 08 02 00
	00 00		 mov	 DWORD PTR $T56558[ebp], 2
  00bb5	ff d7		 call	 edi

; 548  :             if (n != cmtcount)     

  00bb7	8b 7d fc	 mov	 edi, DWORD PTR _cmtcount$52024[ebp]
  00bba	3b df		 cmp	 ebx, edi
  00bbc	74 2f		 je	 SHORT $LN3@getUpdate

; 549  :             {
; 550  :                 node->altshift(n, n-1, cmtcount- n);

  00bbe	8b 55 0c	 mov	 edx, DWORD PTR tv227[ebp]
  00bc1	8b 06		 mov	 eax, DWORD PTR [esi]
  00bc3	6a 41		 push	 65			; 00000041H
  00bc5	2b fb		 sub	 edi, ebx
  00bc7	57		 push	 edi
  00bc8	52		 push	 edx
  00bc9	53		 push	 ebx
  00bca	50		 push	 eax
  00bcb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__netnode_altshift@20

; 551  :                 node->supshift(n, n-1, cmtcount- n);

  00bd1	8b 4d 0c	 mov	 ecx, DWORD PTR tv227[ebp]
  00bd4	8b 16		 mov	 edx, DWORD PTR [esi]
  00bd6	6a 53		 push	 83			; 00000053H
  00bd8	57		 push	 edi
  00bd9	51		 push	 ecx
  00bda	53		 push	 ebx
  00bdb	52		 push	 edx
  00bdc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__netnode_supshift@20
  00be2	5f		 pop	 edi
  00be3	5e		 pop	 esi

; 566  :         break;
; 567  : 
; 568  :     }
; 569  : 
; 570  :    return n;

  00be4	8b c3		 mov	 eax, ebx
  00be6	5b		 pop	 ebx

; 571  : }

  00be7	8b e5		 mov	 esp, ebp
  00be9	5d		 pop	 ebp
  00bea	c2 08 00	 ret	 8
$LN3@getUpdate:

; 552  :                 return n;
; 553  :             }
; 554  :             return n-1;

  00bed	8b 45 0c	 mov	 eax, DWORD PTR tv227[ebp]
  00bf0	5f		 pop	 edi
  00bf1	5e		 pop	 esi
  00bf2	5b		 pop	 ebx

; 571  : }

  00bf3	8b e5		 mov	 esp, ebp
  00bf5	5d		 pop	 ebp
  00bf6	c2 08 00	 ret	 8
$LN2@getUpdate:

; 555  :         }
; 556  :     case MOD_FAST_UPDATE:
; 557  :         //msg("MOD_FADT_UPDATE(%u)\n", n);
; 558  :         // after a fast update there is a normal update
; 559  :         node->altset(-5, MOD_UPDATE);

  00bf9	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00bfb	6a 41		 push	 65			; 00000041H
  00bfd	6a 04		 push	 4
  00bff	8d 45 0c	 lea	 eax, DWORD PTR $T56593[ebp]
  00c02	50		 push	 eax
  00c03	6a fb		 push	 -5			; fffffffbH
  00c05	51		 push	 ecx
  00c06	c7 45 0c 02 00
	00 00		 mov	 DWORD PTR $T56593[ebp], 2
  00c0d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__netnode_supset@20
  00c13	5f		 pop	 edi
  00c14	5e		 pop	 esi

; 566  :         break;
; 567  : 
; 568  :     }
; 569  : 
; 570  :    return n;

  00c15	8b c3		 mov	 eax, ebx
  00c17	5b		 pop	 ebx

; 571  : }

  00c18	8b e5		 mov	 esp, ebp
  00c1a	5d		 pop	 ebp
  00c1b	c2 08 00	 ret	 8
$LN1@getUpdate:

; 560  :         return n;
; 561  :         break;
; 562  : 
; 563  :     default:
; 564  :         //msg("MOD_DEFAULT(%u)\n", n);
; 565  :         GetCommentAddress(node, false);

  00c1e	6a 00		 push	 0
  00c20	56		 push	 esi
  00c21	e8 00 00 00 00	 call	 ?GetCommentAddress@@YGXPAX_N@Z ; GetCommentAddress
$LN7@getUpdate:

; 566  :         break;
; 567  : 
; 568  :     }
; 569  : 
; 570  :    return n;

  00c26	5f		 pop	 edi
  00c27	5e		 pop	 esi
  00c28	8b c3		 mov	 eax, ebx
  00c2a	5b		 pop	 ebx

; 571  : }

  00c2b	8b e5		 mov	 esp, ebp
  00c2d	5d		 pop	 ebp
  00c2e	c2 08 00	 ret	 8
  00c31	8d 49 00	 npad	 3
$LN67@getUpdate:
  00c34	00 00 00 00	 DD	 $LN5@getUpdate
  00c38	00 00 00 00	 DD	 $LN4@getUpdate
  00c3c	00 00 00 00	 DD	 $LN1@getUpdate
  00c40	00 00 00 00	 DD	 $LN2@getUpdate
?getUpdate@@YGIPAXI@Z ENDP				; getUpdate
; Function compile flags: /Ogtp
_segname$52050 = -2052					; size = 1024
_wtitle$ = -1028					; size = 1024
$T56677 = -4						; size = 4
$T56711 = 8						; size = 4
$T56694 = 8						; size = 4
$T56728 = 8						; size = 4
_ea$56649 = 8						; size = 4
$T56645 = 8						; size = 4
$T56628 = 8						; size = 4
_arg$ = 8						; size = 4
?run@@YGXH@Z PROC					; run

; 580  : {

  00c50	55		 push	 ebp
  00c51	8b ec		 mov	 ebp, esp
  00c53	81 ec 04 08 00
	00		 sub	 esp, 2052		; 00000804H
  00c59	53		 push	 ebx
  00c5a	56		 push	 esi
  00c5b	57		 push	 edi

; 581  :     char wtitle[MAXSTR];
; 582  :     segment_t *cmtseg;
; 583  :     netnode *node = new netnode;

  00c5c	6a 04		 push	 4
  00c5e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00c63	83 c4 04	 add	 esp, 4
  00c66	85 c0		 test	 eax, eax
  00c68	74 0a		 je	 SHORT $LN15@run
  00c6a	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
  00c70	8b f0		 mov	 esi, eax
  00c72	eb 02		 jmp	 SHORT $LN16@run
$LN15@run:
  00c74	33 f6		 xor	 esi, esi
$LN16@run:

; 584  :     
; 585  : 
; 586  :     if (!autoIsOk())

  00c76	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__autoIsOk@0
  00c7c	84 c0		 test	 al, al
  00c7e	75 13		 jne	 SHORT $LN12@run

; 587  :     {
; 588  :         warning("IDA is still analysing your file!\nPlugin will start after autoanalysis is finished.");

  00c80	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@CJFGNFBN@IDA?5is?5still?5analysing?5your?5file@
  00c85	e8 00 00 00 00	 call	 ?warning@@YAXPBDZZ	; warning
  00c8a	83 c4 04	 add	 esp, 4

; 589  :         autoWait();

  00c8d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__autoWait@0
$LN12@run:

; 590  :     }
; 591  :     
; 592  :     if (!isInited) ShowBanner();

  00c93	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?isInited@@3_NA, 0 ; isInited
  00c9a	75 2b		 jne	 SHORT $LN20@run
  00c9c	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@GKEMENKJ@?5?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@
  00ca1	e8 00 00 00 00	 call	 ?msg@@YAHPBDZZ		; msg
  00ca6	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@EBMLBBCP@?5?$CK?$CK?$CK?5CommentViewer?5v?40?42?5?$CIc?$CJ?5bLa@
  00cab	e8 00 00 00 00	 call	 ?msg@@YAHPBDZZ		; msg
  00cb0	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@BDAIMFLC@?5?$CK?$CK?$CK?5Bugs?0?5suggestions?5?3?5bLaCk?$EAr@
  00cb5	e8 00 00 00 00	 call	 ?msg@@YAHPBDZZ		; msg
  00cba	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@GKEMENKJ@?5?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK@
  00cbf	e8 00 00 00 00	 call	 ?msg@@YAHPBDZZ		; msg
  00cc4	83 c4 10	 add	 esp, 16			; 00000010H
$LN20@run:

; 593  :     isInited = true;
; 594  :     
; 595  : 
; 596  : #ifdef _DEBUG_
; 597  :     if(arg == -1)
; 598  :     {
; 599  :         PLUGIN.flags |= PLUGIN_UNL;
; 600  :         msg("Unloading CommentViewer plugin...\n");
; 601  :         return;
; 602  :     }
; 603  : #endif
; 604  : 
; 605  :     if (arg == 0)    // do full search

  00cc7	8b 45 08	 mov	 eax, DWORD PTR _arg$[ebp]
  00cca	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?isInited@@3_NA, 1 ; isInited
  00cd1	85 c0		 test	 eax, eax
  00cd3	0f 85 93 00 00
	00		 jne	 $LN10@run

; 606  :     {
; 607  :         if (!winCount)

  00cd9	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ?winCount@@3GA ; winCount
  00cdf	66 85 c0	 test	 ax, ax
  00ce2	75 19		 jne	 SHORT $LN9@run

; 608  :             qstrncpy(wtitle, "Comment Viewer - [FULL]", MAXSTR);

  00ce4	68 00 04 00 00	 push	 1024			; 00000400H
  00ce9	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CDAMMLLD@Comment?5Viewer?5?9?5?$FLFULL?$FN?$AA@
  00cee	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _wtitle$[ebp]
  00cf4	50		 push	 eax
  00cf5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__qstrncpy@12

; 609  :         else

  00cfb	eb 1e		 jmp	 SHORT $LN8@run
$LN9@run:

; 610  :             qsnprintf(wtitle, MAXSTR, "[%i] Comment Viewer - [FULL]", winCount);

  00cfd	0f b7 c8	 movzx	 ecx, ax
  00d00	51		 push	 ecx
  00d01	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@LFKLCMGG@?$FL?$CFi?$FN?5Comment?5Viewer?5?9?5?$FLFULL?$FN?$AA@
  00d06	8d 95 fc fb ff
	ff		 lea	 edx, DWORD PTR _wtitle$[ebp]
  00d0c	68 00 04 00 00	 push	 1024			; 00000400H
  00d11	52		 push	 edx
  00d12	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__qsnprintf
  00d18	83 c4 10	 add	 esp, 16			; 00000010H
$LN8@run:

; 611  : 
; 612  : 
; 613  :         node->create(wtitle);

  00d1b	6a 01		 push	 1
  00d1d	6a 00		 push	 0
  00d1f	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _wtitle$[ebp]
  00d25	50		 push	 eax
  00d26	56		 push	 esi
  00d27	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__netnode_check@16

; 614  :         node->altset(-2, inf.minEA);          // max address

  00d2d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp__inf
  00d33	8b 51 2b	 mov	 edx, DWORD PTR [ecx+43]
  00d36	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00d38	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__netnode_supset@20
  00d3e	6a 41		 push	 65			; 00000041H
  00d40	6a 04		 push	 4
  00d42	8d 45 08	 lea	 eax, DWORD PTR $T56628[ebp]
  00d45	50		 push	 eax
  00d46	6a fe		 push	 -2			; fffffffeH
  00d48	51		 push	 ecx
  00d49	89 55 08	 mov	 DWORD PTR $T56628[ebp], edx
  00d4c	ff d7		 call	 edi

; 615  :         node->altset(-3, inf.maxEA);          // min address

  00d4e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp__inf
  00d54	8b 42 2f	 mov	 eax, DWORD PTR [edx+47]
  00d57	8b 16		 mov	 edx, DWORD PTR [esi]
  00d59	6a 41		 push	 65			; 00000041H
  00d5b	6a 04		 push	 4
  00d5d	8d 4d 08	 lea	 ecx, DWORD PTR $T56645[ebp]
  00d60	51		 push	 ecx
  00d61	6a fd		 push	 -3			; fffffffdH
  00d63	89 45 08	 mov	 DWORD PTR $T56645[ebp], eax
  00d66	52		 push	 edx

; 616  :     }
; 617  :     else

  00d67	e9 db 00 00 00	 jmp	 $LN66@run
$LN10@run:

; 618  :     {
; 619  :         if (arg == 1)   //search only on given segment

  00d6c	83 f8 01	 cmp	 eax, 1
  00d6f	0f 85 44 01 00
	00		 jne	 $LN6@run

; 620  :         {            
; 621  :             cmtseg = choose_segm("Please choose segment to get comments from:", get_screen_ea());

  00d75	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp__callui
  00d7b	8b 11		 mov	 edx, DWORD PTR [ecx]
  00d7d	8d 45 08	 lea	 eax, DWORD PTR _ea$56649[ebp]
  00d80	50		 push	 eax
  00d81	6a 0a		 push	 10			; 0000000aH
  00d83	ff d2		 call	 edx
  00d85	8b 45 08	 mov	 eax, DWORD PTR _ea$56649[ebp]
  00d88	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp__callui
  00d8e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00d90	50		 push	 eax
  00d91	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@OKJPJFGB@Please?5choose?5segment?5to?5get?5com@
  00d96	6a 09		 push	 9
  00d98	6a 0f		 push	 15			; 0000000fH
  00d9a	ff d2		 call	 edx
  00d9c	8b d8		 mov	 ebx, eax
  00d9e	83 c4 18	 add	 esp, 24			; 00000018H

; 622  :             if (cmtseg == NULL) 

  00da1	85 db		 test	 ebx, ebx
  00da3	0f 84 10 01 00
	00		 je	 $LN6@run

; 623  :                 return;
; 624  : 
; 625  :             char segname[MAXSTR];
; 626  :             get_true_segm_name(cmtseg, segname, MAXSTR);

  00da9	68 00 04 00 00	 push	 1024			; 00000400H
  00dae	8d 85 fc f7 ff
	ff		 lea	 eax, DWORD PTR _segname$52050[ebp]
  00db4	50		 push	 eax
  00db5	53		 push	 ebx
  00db6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__get_true_segm_name@12

; 627  :             
; 628  :             if (!winCount)

  00dbc	66 a1 00 00 00
	00		 mov	 ax, WORD PTR ?winCount@@3GA ; winCount

; 629  :                 qsnprintf(wtitle, MAXSTR, "Comment Viewer - [%.8s]", segname);

  00dc2	8d 8d fc f7 ff
	ff		 lea	 ecx, DWORD PTR _segname$52050[ebp]
  00dc8	51		 push	 ecx
  00dc9	66 85 c0	 test	 ax, ax
  00dcc	75 1c		 jne	 SHORT $LN4@run
  00dce	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@OIAEPCPP@Comment?5Viewer?5?9?5?$FL?$CF?48s?$FN?$AA@
  00dd3	8d 95 fc fb ff
	ff		 lea	 edx, DWORD PTR _wtitle$[ebp]
  00dd9	68 00 04 00 00	 push	 1024			; 00000400H
  00dde	52		 push	 edx
  00ddf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__qsnprintf
  00de5	83 c4 10	 add	 esp, 16			; 00000010H

; 630  :             else

  00de8	eb 1e		 jmp	 SHORT $LN3@run
$LN4@run:

; 631  :                 qsnprintf(wtitle, MAXSTR, "[%i] Comment Viewer - [%.8s]", winCount, segname);

  00dea	0f b7 d0	 movzx	 edx, ax
  00ded	52		 push	 edx
  00dee	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@HOKDBFCK@?$FL?$CFi?$FN?5Comment?5Viewer?5?9?5?$FL?$CF?48s?$FN?$AA@
  00df3	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _wtitle$[ebp]
  00df9	68 00 04 00 00	 push	 1024			; 00000400H
  00dfe	50		 push	 eax
  00dff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__qsnprintf
  00e05	83 c4 14	 add	 esp, 20			; 00000014H
$LN3@run:

; 632  : 
; 633  :             node->create(wtitle);

  00e08	6a 01		 push	 1
  00e0a	6a 00		 push	 0
  00e0c	8d 8d fc fb ff
	ff		 lea	 ecx, DWORD PTR _wtitle$[ebp]
  00e12	51		 push	 ecx
  00e13	56		 push	 esi
  00e14	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__netnode_check@16

; 634  :             node->altset(-2, cmtseg->startEA);          //start of segment

  00e1a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00e1c	8b 13		 mov	 edx, DWORD PTR [ebx]
  00e1e	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__netnode_supset@20
  00e24	6a 41		 push	 65			; 00000041H
  00e26	6a 04		 push	 4
  00e28	8d 45 fc	 lea	 eax, DWORD PTR $T56677[ebp]
  00e2b	50		 push	 eax
  00e2c	6a fe		 push	 -2			; fffffffeH
  00e2e	51		 push	 ecx
  00e2f	89 55 fc	 mov	 DWORD PTR $T56677[ebp], edx
  00e32	ff d7		 call	 edi

; 635  :             node->altset(-3, cmtseg->endEA);            //end of segment

  00e34	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  00e37	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00e39	6a 41		 push	 65			; 00000041H
  00e3b	6a 04		 push	 4
  00e3d	8d 45 08	 lea	 eax, DWORD PTR $T56694[ebp]
  00e40	50		 push	 eax
  00e41	6a fd		 push	 -3			; fffffffdH
  00e43	89 55 08	 mov	 DWORD PTR $T56694[ebp], edx
  00e46	51		 push	 ecx
$LN66@run:
  00e47	ff d7		 call	 edi

; 636  :         }
; 637  :         else
; 638  :             return;       
; 639  :     }
; 640  : 
; 641  :     //get options to use
; 642  :     int result = AskUsingForm_c(OPTIONS_FORM, &opt1, &opt2);

  00e49	68 00 00 00 00	 push	 OFFSET ?opt2@@3FA
  00e4e	68 00 00 00 00	 push	 OFFSET ?opt1@@3FA
  00e53	68 00 00 00 00	 push	 OFFSET ??_C@_0BEG@BJIFKFGI@Comment?5Viewer?5v?40?42?6Options?3?6?$DMS@
  00e58	e8 00 00 00 00	 call	 ?AskUsingForm_c@@YAHPBDZZ ; AskUsingForm_c
  00e5d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 643  :     
; 644  :     if (!result)

  00e60	85 c0		 test	 eax, eax
  00e62	74 55		 je	 SHORT $LN6@run

; 645  :         return;
; 646  :     
; 647  :     short options =  (opt2 << 2) + opt1;

  00e64	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?opt1@@3FA ; opt1
  00e6a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?opt2@@3FA ; opt2

; 648  :     node->altset(-4, options);

  00e6f	6a 41		 push	 65			; 00000041H
  00e71	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  00e74	6a 04		 push	 4
  00e76	8d 45 08	 lea	 eax, DWORD PTR $T56711[ebp]
  00e79	50		 push	 eax
  00e7a	0f bf d1	 movsx	 edx, cx
  00e7d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00e7f	6a fc		 push	 -4			; fffffffcH
  00e81	51		 push	 ecx
  00e82	89 55 08	 mov	 DWORD PTR $T56711[ebp], edx
  00e85	ff d7		 call	 edi

; 649  :     node->altset(-5, MOD_UPDATE);

  00e87	8b 06		 mov	 eax, DWORD PTR [esi]
  00e89	6a 41		 push	 65			; 00000041H
  00e8b	6a 04		 push	 4
  00e8d	8d 55 08	 lea	 edx, DWORD PTR $T56728[ebp]
  00e90	52		 push	 edx
  00e91	6a fb		 push	 -5			; fffffffbH
  00e93	50		 push	 eax
  00e94	c7 45 08 02 00
	00 00		 mov	 DWORD PTR $T56728[ebp], 2
  00e9b	ff d7		 call	 edi

; 650  :     
; 651  :     //increment number of windows
; 652  :     winCount++;

  00e9d	66 ff 05 00 00
	00 00		 inc	 WORD PTR ?winCount@@3GA	; winCount

; 653  : 
; 654  :     GetCommentAddress(node, true);

  00ea4	6a 01		 push	 1
  00ea6	56		 push	 esi
  00ea7	e8 00 00 00 00	 call	 ?GetCommentAddress@@YGXPAX_N@Z ; GetCommentAddress

; 655  :     
; 656  :     // now open the window
; 657  :     choose2(false,          // non-modal window
; 658  :         -1, -1, -1, -1,     // position is determined by Windows
; 659  :         node,               // pass the created netnode to the window
; 660  :         qnumber(header),    // number of columns
; 661  :         widths,             // widths of columns
; 662  :         getSize,            // function that returns number of lines
; 663  :         getDescription,     // function that generates a line
; 664  :         wtitle,              // window title
; 665  :         160,                // use the default icon for the window
; 666  :         0,                 // position the cursor on the first line
; 667  :         btDelete,           // "kill" callback
; 668  :         NULL,               // "new" callback
; 669  :         getUpdate,          // "update" callback
; 670  :         btEdit,             // "edit" callback
; 671  :         btEnter,            // function to call when the user pressed Enter
; 672  :         btDestroy,          // function to call when the window is closed
; 673  :         NULL,               // use default popup menu items
; 674  :         getIcon);           // use the same icon for all line

  00eac	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _wtitle$[ebp]
  00eb2	8b ce		 mov	 ecx, esi
  00eb4	e8 00 00 00 00	 call	 ?choose2@@YGIHHHHHPAXHPBHP6GI0@ZP6GX0IPBQAD@ZPBDHIP6GI0I@ZP6GX0@Z6P6GX0I@Z87PBQBDP6GH0I@Z@Z ; choose2
$LN6@run:
  00eb9	5f		 pop	 edi
  00eba	5e		 pop	 esi
  00ebb	5b		 pop	 ebx

; 675  : }

  00ebc	8b e5		 mov	 esp, ebp
  00ebe	5d		 pop	 ebp
  00ebf	c2 04 00	 ret	 4
?run@@YGXH@Z ENDP					; run
_TEXT	ENDS
END
